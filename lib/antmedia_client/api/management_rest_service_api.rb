=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'uri'

module AntmediaClient
  class ManagementRestServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates initial user. This is a one time scenario when initial user creation required and shouldn't be used otherwise. User object is required and can't be null
    # 
    # @param body User object. If it is null, new user won&#39;t be created.
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def add_initial_user(body, opts = {})
      data, _status_code, _headers = add_initial_user_with_http_info(body, opts)
      data
    end

    # Creates initial user. This is a one time scenario when initial user creation required and shouldn&#39;t be used otherwise. User object is required and can&#39;t be null
    # 
    # @param body User object. If it is null, new user won&#39;t be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def add_initial_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.add_initial_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.add_initial_user"
      end
      # resource path
      local_var_path = '/v2/users/initial'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#add_initial_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new user. If user object is null or if user is not authenticated, new user won't be created.
    # 
    # @param body User object. If it is null, new user won&#39;t be created.
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def add_user(body, opts = {})
      data, _status_code, _headers = add_user_with_http_info(body, opts)
      data
    end

    # Creates a new user. If user object is null or if user is not authenticated, new user won&#39;t be created.
    # 
    # @param body User object. If it is null, new user won&#39;t be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def add_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.add_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.add_user"
      end
      # resource path
      local_var_path = '/v2/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#add_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Authenticates user with given username and password. Requires user object to authenticate.
    # 
    # @param body User object to authenticate
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def authenticate_user(body, opts = {})
      data, _status_code, _headers = authenticate_user_with_http_info(body, opts)
      data
    end

    # Authenticates user with given username and password. Requires user object to authenticate.
    # 
    # @param body User object to authenticate
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def authenticate_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.authenticate_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.authenticate_user"
      end
      # resource path
      local_var_path = '/v2/users/authenticate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#authenticate_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Changes server settings. Sets Server Name, license key, market build status and node group.
    # 
    # @param body Server settings
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def change_server_settings(body, opts = {})
      data, _status_code, _headers = change_server_settings_with_http_info(body, opts)
      data
    end

    # Changes server settings. Sets Server Name, license key, market build status and node group.
    # 
    # @param body Server settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def change_server_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.change_server_settings ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.change_server_settings"
      end
      # resource path
      local_var_path = '/v2/server-settings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#change_server_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Changes the application settings with the given settings. Null fields will be set to default values.
    # 
    # @param appname Application name
    # @param body New application settings, null fields will be set to default values
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def change_settings(appname, body, opts = {})
      data, _status_code, _headers = change_settings_with_http_info(appname, body, opts)
      data
    end

    # Changes the application settings with the given settings. Null fields will be set to default values.
    # 
    # @param appname Application name
    # @param body New application settings, null fields will be set to default values
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def change_settings_with_http_info(appname, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.change_settings ...'
      end
      # verify the required parameter 'appname' is set
      if @api_client.config.client_side_validation && appname.nil?
        fail ArgumentError, "Missing the required parameter 'appname' when calling ManagementRestServiceApi.change_settings"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.change_settings"
      end
      # resource path
      local_var_path = '/v2/applications/settings/{appname}'.sub('{' + 'appname' + '}', appname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#change_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Changes the given user's password.
    # 
    # @param body User object to change the password
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def change_user_password(body, opts = {})
      data, _status_code, _headers = change_user_password_with_http_info(body, opts)
      data
    end

    # Changes the given user&#39;s password.
    # 
    # @param body User object to change the password
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def change_user_password_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.change_user_password ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.change_user_password"
      end
      # resource path
      local_var_path = '/v2/users/password'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#change_user_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new application with given name. It supports uploading custom WAR files
    # 
    # @param app_name Name for the new application
    # @param body file
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def create_application(app_name, body, opts = {})
      data, _status_code, _headers = create_application_with_http_info(app_name, body, opts)
      data
    end

    # Creates a new application with given name. It supports uploading custom WAR files
    # 
    # @param app_name Name for the new application
    # @param body file
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def create_application_with_http_info(app_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.create_application ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling ManagementRestServiceApi.create_application"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.create_application"
      end
      # resource path
      local_var_path = '/v2/applications/{appName}'.sub('{' + 'appName' + '}', app_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new application with given name. It just creates default app
    # 
    # @param app_name Name for the new application
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def create_application_0(app_name, opts = {})
      data, _status_code, _headers = create_application_0_with_http_info(app_name, opts)
      data
    end

    # Creates a new application with given name. It just creates default app
    # 
    # @param app_name Name for the new application
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def create_application_0_with_http_info(app_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.create_application_0 ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling ManagementRestServiceApi.create_application_0"
      end
      # resource path
      local_var_path = '/v2/applications/{appName}'.sub('{' + 'appName' + '}', app_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#create_application_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes application with the given name.
    # 
    # @param app_name Name of the application to delete
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_db 
    # @return [Result]
    def delete_application(app_name, opts = {})
      data, _status_code, _headers = delete_application_with_http_info(app_name, opts)
      data
    end

    # Deletes application with the given name.
    # 
    # @param app_name Name of the application to delete
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete_db 
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_application_with_http_info(app_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.delete_application ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling ManagementRestServiceApi.delete_application"
      end
      # resource path
      local_var_path = '/v2/applications/{appName}'.sub('{' + 'appName' + '}', app_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'deleteDB'] = opts[:'delete_db'] if !opts[:'delete_db'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#delete_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the user from the server management panel's user list
    # 
    # @param username User name or e-mail of the user to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def delete_user(username, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(username, opts)
      data
    end

    # Delete the user from the server management panel&#39;s user list
    # 
    # @param username User name or e-mail of the user to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def delete_user_with_http_info(username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.delete_user ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling ManagementRestServiceApi.delete_user"
      end
      # resource path
      local_var_path = '/v2/users/{username}'.sub('{' + 'username' + '}', username.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit the user in the server management panel's user list. It can change password or user type(admin, read only) 
    # 
    # @param body User to be edited. It finds the user with username.
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def edit_user(body, opts = {})
      data, _status_code, _headers = edit_user_with_http_info(body, opts)
      data
    end

    # Edit the user in the server management panel&#39;s user list. It can change password or user type(admin, read only) 
    # 
    # @param body User to be edited. It finds the user with username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def edit_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.edit_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ManagementRestServiceApi.edit_user"
      end
      # resource path
      local_var_path = '/v2/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#edit_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns live streams in the specified application. Retrieves broadcast names and the consumer size.
    # 
    # @param appname Application name
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_app_live_streams(appname, opts = {})
      data, _status_code, _headers = get_app_live_streams_with_http_info(appname, opts)
      data
    end

    # Returns live streams in the specified application. Retrieves broadcast names and the consumer size.
    # 
    # @param appname Application name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_app_live_streams_with_http_info(appname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_app_live_streams ...'
      end
      # verify the required parameter 'appname' is set
      if @api_client.config.client_side_validation && appname.nil?
        fail ArgumentError, "Missing the required parameter 'appname' when calling ManagementRestServiceApi.get_app_live_streams"
      end
      # resource path
      local_var_path = '/v2/applications/live-streams/{appname}'.sub('{' + 'appname' + '}', appname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_app_live_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets application info. Application info includes live stream count, vod count and application name.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_application_info(opts = {})
      data, _status_code, _headers = get_application_info_with_http_info(opts)
      data
    end

    # Gets application info. Application info includes live stream count, vod count and application name.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_application_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_application_info ...'
      end
      # resource path
      local_var_path = '/v2/applications-info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_application_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the applications in the server. Returns the name of the applications in JSON format.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_applications(opts = {})
      data, _status_code, _headers = get_applications_with_http_info(opts)
      data
    end

    # Gets the applications in the server. Returns the name of the applications in JSON format.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_applications ...'
      end
      # resource path
      local_var_path = '/v2/applications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns if user is blocked. User is blocked for a specific time if there are login attempts
    # 
    # @param usermail User name or e-mail of the user to check it status
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_blocked_status(usermail, opts = {})
      data, _status_code, _headers = get_blocked_status_with_http_info(usermail, opts)
      data
    end

    # Returns if user is blocked. User is blocked for a specific time if there are login attempts
    # 
    # @param usermail User name or e-mail of the user to check it status
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_blocked_status_with_http_info(usermail, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_blocked_status ...'
      end
      # verify the required parameter 'usermail' is set
      if @api_client.config.client_side_validation && usermail.nil?
        fail ArgumentError, "Missing the required parameter 'usermail' when calling ManagementRestServiceApi.get_blocked_status"
      end
      # resource path
      local_var_path = '/v2/users/{usermail}/blocked'.sub('{' + 'usermail' + '}', usermail.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_blocked_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns system cpu load, process cpu load and process cpu time.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_cpu_info(opts = {})
      data, _status_code, _headers = get_cpu_info_with_http_info(opts)
      data
    end

    # Returns system cpu load, process cpu load and process cpu time.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_cpu_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_cpu_info ...'
      end
      # resource path
      local_var_path = '/v2/cpu-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_cpu_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets system file status. Returns usable space, total space, available space and in use space.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_file_system_info(opts = {})
      data, _status_code, _headers = get_file_system_info_with_http_info(opts)
      data
    end

    # Gets system file status. Returns usable space, total space, available space and in use space.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_file_system_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_file_system_info ...'
      end
      # resource path
      local_var_path = '/v2/file-system-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_file_system_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets GPU information. Returns whether you have GPU or not. If yes, information of the gpu and the number of total gpus.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_gpu_info(opts = {})
      data, _status_code, _headers = get_gpu_info_with_http_info(opts)
      data
    end

    # Gets GPU information. Returns whether you have GPU or not. If yes, information of the gpu and the number of total gpus.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_gpu_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_gpu_info ...'
      end
      # resource path
      local_var_path = '/v2/gpu-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_gpu_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns heap dump.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_heap_dump(opts = {})
      data, _status_code, _headers = get_heap_dump_with_http_info(opts)
      data
    end

    # Returns heap dump.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_heap_dump_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_heap_dump ...'
      end
      # resource path
      local_var_path = '/v2/heap-dump'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_heap_dump\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns JVM memory informations. Max, total, free, in-use and available processors are returned.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_jvm_memory_info(opts = {})
      data, _status_code, _headers = get_jvm_memory_info_with_http_info(opts)
      data
    end

    # Returns JVM memory informations. Max, total, free, in-use and available processors are returned.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_jvm_memory_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_jvm_memory_info ...'
      end
      # resource path
      local_var_path = '/v2/jvm-memory-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_jvm_memory_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the last checked license status. Includes license ID, owner, start date, end date, type and license count.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_licence_status(opts = {})
      data, _status_code, _headers = get_licence_status_with_http_info(opts)
      data
    end

    # Returns the last checked license status. Includes license ID, owner, start date, end date, type and license count.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_licence_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_licence_status ...'
      end
      # resource path
      local_var_path = '/v2/last-licence-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_licence_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns license status. Includes license ID, status, owner, start date, end date, type and license count.
    # 
    # @param key License key
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_licence_status_0(key, opts = {})
      data, _status_code, _headers = get_licence_status_0_with_http_info(key, opts)
      data
    end

    # Returns license status. Includes license ID, status, owner, start date, end date, type and license count.
    # 
    # @param key License key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_licence_status_0_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_licence_status_0 ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ManagementRestServiceApi.get_licence_status_0"
      end
      # resource path
      local_var_path = '/v2/licence-status'

      # query parameters
      query_params = {}
      query_params[:'key'] = key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_licence_status_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns total number of live streams and total number of connections.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_live_clients_size(opts = {})
      data, _status_code, _headers = get_live_clients_size_with_http_info(opts)
      data
    end

    # Returns total number of live streams and total number of connections.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_live_clients_size_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_live_clients_size ...'
      end
      # resource path
      local_var_path = '/v2/live-clients-size'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_live_clients_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets log file. Char size of the log, offset or log type can be specified.
    # 
    # @param char_size Char size of the log
    # @param log_type Log type. ERROR can be used to get only error logs
    # @param offset_size Offset of the retrieved log
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_log_file(char_size, log_type, offset_size, opts = {})
      data, _status_code, _headers = get_log_file_with_http_info(char_size, log_type, offset_size, opts)
      data
    end

    # Gets log file. Char size of the log, offset or log type can be specified.
    # 
    # @param char_size Char size of the log
    # @param log_type Log type. ERROR can be used to get only error logs
    # @param offset_size Offset of the retrieved log
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_log_file_with_http_info(char_size, log_type, offset_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_log_file ...'
      end
      # verify the required parameter 'char_size' is set
      if @api_client.config.client_side_validation && char_size.nil?
        fail ArgumentError, "Missing the required parameter 'char_size' when calling ManagementRestServiceApi.get_log_file"
      end
      # verify the required parameter 'log_type' is set
      if @api_client.config.client_side_validation && log_type.nil?
        fail ArgumentError, "Missing the required parameter 'log_type' when calling ManagementRestServiceApi.get_log_file"
      end
      # verify the required parameter 'offset_size' is set
      if @api_client.config.client_side_validation && offset_size.nil?
        fail ArgumentError, "Missing the required parameter 'offset_size' when calling ManagementRestServiceApi.get_log_file"
      end
      # resource path
      local_var_path = '/v2/log-file/{offsetSize}/{charSize}'.sub('{' + 'charSize' + '}', char_size.to_s).sub('{' + 'offsetSize' + '}', offset_size.to_s)

      # query parameters
      query_params = {}
      query_params[:'logType'] = log_type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_log_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the server settings. From log level to measurement period of cpu, license key of the server host address and many more settings are returned at once.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_server_settings(opts = {})
      data, _status_code, _headers = get_server_settings_with_http_info(opts)
      data
    end

    # Returns the server settings. From log level to measurement period of cpu, license key of the server host address and many more settings are returned at once.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_server_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_server_settings ...'
      end
      # resource path
      local_var_path = '/v2/server-settings'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_server_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets server time. Returns server uptime and start time in milliseconds in JSON.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_server_time(opts = {})
      data, _status_code, _headers = get_server_time_with_http_info(opts)
      data
    end

    # Gets server time. Returns server uptime and start time in milliseconds in JSON.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_server_time_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_server_time ...'
      end
      # resource path
      local_var_path = '/v2/server-time'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_server_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the specified application settings
    # 
    # @param appname Application name
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_settings(appname, opts = {})
      data, _status_code, _headers = get_settings_with_http_info(appname, opts)
      data
    end

    # Returns the specified application settings
    # 
    # @param appname Application name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_settings_with_http_info(appname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_settings ...'
      end
      # verify the required parameter 'appname' is set
      if @api_client.config.client_side_validation && appname.nil?
        fail ArgumentError, "Missing the required parameter 'appname' when calling ManagementRestServiceApi.get_settings"
      end
      # resource path
      local_var_path = '/v2/applications/settings/{appname}'.sub('{' + 'appname' + '}', appname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns system information which includes many information such as JVM memory, OS information, Available File Space, Physical memory informations in detail.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_system_info(opts = {})
      data, _status_code, _headers = get_system_info_with_http_info(opts)
      data
    end

    # Returns system information which includes many information such as JVM memory, OS information, Available File Space, Physical memory informations in detail.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_system_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_system_info ...'
      end
      # resource path
      local_var_path = '/v2/system-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_system_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets system memory status. Returns Virtual, total physical, available physical, currently in use, total swap space, available swap space and in use swap space. 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_system_memory_info(opts = {})
      data, _status_code, _headers = get_system_memory_info_with_http_info(opts)
      data
    end

    # Gets system memory status. Returns Virtual, total physical, available physical, currently in use, total swap space, available swap space and in use swap space. 
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_system_memory_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_system_memory_info ...'
      end
      # resource path
      local_var_path = '/v2/system-memory-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_system_memory_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets system resource information. Returns number of total live streams, cpu usage, system information, jvm information, file system information, license status, gpu status etc. Basically returns most of the information in one package.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_system_resources_info(opts = {})
      data, _status_code, _headers = get_system_resources_info_with_http_info(opts)
      data
    end

    # Gets system resource information. Returns number of total live streams, cpu usage, system information, jvm information, file system information, license status, gpu status etc. Basically returns most of the information in one package.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_system_resources_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_system_resources_info ...'
      end
      # resource path
      local_var_path = '/v2/system-resources'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_system_resources_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets thread dump in plain text.Includes very detailed information such as thread name, thread id, blocked time of thread, thread state and many more information are returned.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_thread_dump(opts = {})
      data, _status_code, _headers = get_thread_dump_with_http_info(opts)
      data
    end

    # Gets thread dump in plain text.Includes very detailed information such as thread name, thread id, blocked time of thread, thread state and many more information are returned.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_thread_dump_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_thread_dump ...'
      end
      # resource path
      local_var_path = '/v2/thread-dump'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_thread_dump\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns processor's thread information. Includes number of dead locked threads, thread count, and thread peek count.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_threads_info(opts = {})
      data, _status_code, _headers = get_threads_info_with_http_info(opts)
      data
    end

    # Returns processor&#39;s thread information. Includes number of dead locked threads, thread count, and thread peek count.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_threads_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_threads_info ...'
      end
      # resource path
      local_var_path = '/v2/threads'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_threads_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns user list in the server management panel
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_user_list(opts = {})
      data, _status_code, _headers = get_user_list_with_http_info(opts)
      data
    end

    # Returns user list in the server management panel
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_user_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_user_list ...'
      end
      # resource path
      local_var_path = '/v2/user-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_user_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the version of Ant Media Server.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_version(opts = {})
      data, _status_code, _headers = get_version_with_http_info(opts)
      data
    end

    # Returns the version of Ant Media Server.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.get_version ...'
      end
      # resource path
      local_var_path = '/v2/version'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#get_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns whether current user is admin or not. If user is admin, it can call POST/PUT/DELETE methods
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def is_admin(opts = {})
      data, _status_code, _headers = is_admin_with_http_info(opts)
      data
    end

    # Returns whether current user is admin or not. If user is admin, it can call POST/PUT/DELETE methods
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def is_admin_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.is_admin ...'
      end
      # resource path
      local_var_path = '/v2/admin-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#is_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns true if user is authenticated to call rest api operations.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def is_authenticated_rest(opts = {})
      data, _status_code, _headers = is_authenticated_rest_with_http_info(opts)
      data
    end

    # Returns true if user is authenticated to call rest api operations.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def is_authenticated_rest_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.is_authenticated_rest ...'
      end
      # resource path
      local_var_path = '/v2/authentication-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#is_authenticated_rest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns true if the server is enterprise edition.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def is_enterprise_edition(opts = {})
      data, _status_code, _headers = is_enterprise_edition_with_http_info(opts)
      data
    end

    # Returns true if the server is enterprise edition.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def is_enterprise_edition_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.is_enterprise_edition ...'
      end
      # resource path
      local_var_path = '/v2/enterprise-edition'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#is_enterprise_edition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Checks first login status. If server being logged in first time, it returns true, otherwise false.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def is_first_login(opts = {})
      data, _status_code, _headers = is_first_login_with_http_info(opts)
      data
    end

    # Checks first login status. If server being logged in first time, it returns true, otherwise false.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def is_first_login_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.is_first_login ...'
      end
      # resource path
      local_var_path = '/v2/first-login-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#is_first_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the server mode. If it is in the cluster mode, result will be true.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def is_in_cluster_mode(opts = {})
      data, _status_code, _headers = is_in_cluster_mode_with_http_info(opts)
      data
    end

    # Returns the server mode. If it is in the cluster mode, result will be true.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def is_in_cluster_mode_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.is_in_cluster_mode ...'
      end
      # resource path
      local_var_path = '/v2/cluster-mode-status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#is_in_cluster_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Checks whether application or applications have shutdown properly or not.
    # 
    # @param app_names Application name
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def is_shutdown_properly(app_names, opts = {})
      data, _status_code, _headers = is_shutdown_properly_with_http_info(app_names, opts)
      data
    end

    # Checks whether application or applications have shutdown properly or not.
    # 
    # @param app_names Application name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def is_shutdown_properly_with_http_info(app_names, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.is_shutdown_properly ...'
      end
      # verify the required parameter 'app_names' is set
      if @api_client.config.client_side_validation && app_names.nil?
        fail ArgumentError, "Missing the required parameter 'app_names' when calling ManagementRestServiceApi.is_shutdown_properly"
      end
      # resource path
      local_var_path = '/v2/shutdown-proper-status'

      # query parameters
      query_params = {}
      query_params[:'appNames'] = app_names

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#is_shutdown_properly\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the hostname to check liveness with HTTP type healthcheck.
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def liveness(opts = {})
      liveness_with_http_info(opts)
      nil
    end

    # Returns the hostname to check liveness with HTTP type healthcheck.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def liveness_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.liveness ...'
      end
      # resource path
      local_var_path = '/v2/liveness'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#liveness\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resets the viewer counts and broadcasts statuses in the db. This can be used after server crashes to recover db. It's not intended to use to ignore the crash.
    # 
    # @param appname Application name
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def reset_broadcast(appname, opts = {})
      data, _status_code, _headers = reset_broadcast_with_http_info(appname, opts)
      data
    end

    # Resets the viewer counts and broadcasts statuses in the db. This can be used after server crashes to recover db. It&#39;s not intended to use to ignore the crash.
    # 
    # @param appname Application name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def reset_broadcast_with_http_info(appname, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.reset_broadcast ...'
      end
      # verify the required parameter 'appname' is set
      if @api_client.config.client_side_validation && appname.nil?
        fail ArgumentError, "Missing the required parameter 'appname' when calling ManagementRestServiceApi.reset_broadcast"
      end
      # resource path
      local_var_path = '/v2/applications/{appname}/reset'.sub('{' + 'appname' + '}', appname.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#reset_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set application or applications shutdown properly to true
    # 
    # @param app_names Application name
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def set_shutdown_status(app_names, opts = {})
      data, _status_code, _headers = set_shutdown_status_with_http_info(app_names, opts)
      data
    end

    # Set application or applications shutdown properly to true
    # 
    # @param app_names Application name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def set_shutdown_status_with_http_info(app_names, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementRestServiceApi.set_shutdown_status ...'
      end
      # verify the required parameter 'app_names' is set
      if @api_client.config.client_side_validation && app_names.nil?
        fail ArgumentError, "Missing the required parameter 'app_names' when calling ManagementRestServiceApi.set_shutdown_status"
      end
      # resource path
      local_var_path = '/v2/shutdown-properly'

      # query parameters
      query_params = {}
      query_params[:'appNames'] = app_names

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementRestServiceApi#set_shutdown_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
