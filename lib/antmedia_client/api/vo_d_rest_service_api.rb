=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'uri'

module AntmediaClient
  class VoDRestServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete specific VoD File
    # 
    # @param id the id of the VoD file
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def delete_vo_d(id, opts = {})
      data, _status_code, _headers = delete_vo_d_with_http_info(id, opts)
      data
    end

    # Delete specific VoD File
    # 
    # @param id the id of the VoD file
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_vo_d_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.delete_vo_d ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VoDRestServiceApi.delete_vo_d"
      end
      # resource path
      local_var_path = '/v2/vods/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#delete_vo_d\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete bulk VoD Files based on Vod Id
    # 
    # @param body the ids of the VoD file
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def delete_vo_ds(body, opts = {})
      data, _status_code, _headers = delete_vo_ds_with_http_info(body, opts)
      data
    end

    # Delete bulk VoD Files based on Vod Id
    # 
    # @param body the ids of the VoD file
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_vo_ds_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.delete_vo_ds ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VoDRestServiceApi.delete_vo_ds"
      end
      # resource path
      local_var_path = '/v2/vods/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#delete_vo_ds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the total number of VoDs
    # 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def get_total_vod_number(opts = {})
      data, _status_code, _headers = get_total_vod_number_with_http_info(opts)
      data
    end

    # Get the total number of VoDs
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def get_total_vod_number_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.get_total_vod_number ...'
      end
      # resource path
      local_var_path = '/v2/vods/count'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#get_total_vod_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the partial number of VoDs depending on the searched items
    # 
    # @param search Search parameter to get the number of items including it 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def get_total_vod_number_0(search, opts = {})
      data, _status_code, _headers = get_total_vod_number_0_with_http_info(search, opts)
      data
    end

    # Get the partial number of VoDs depending on the searched items
    # 
    # @param search Search parameter to get the number of items including it 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def get_total_vod_number_0_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.get_total_vod_number_0 ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling VoDRestServiceApi.get_total_vod_number_0"
      end
      # resource path
      local_var_path = '/v2/vods/count/{search}'.sub('{' + 'search' + '}', search.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#get_total_vod_number_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # VoD file from database
    # 
    # @param id id of the VoD
    # @param [Hash] opts the optional parameters
    # @return [VoD]
    def get_vo_d(id, opts = {})
      data, _status_code, _headers = get_vo_d_with_http_info(id, opts)
      data
    end

    # VoD file from database
    # 
    # @param id id of the VoD
    # @param [Hash] opts the optional parameters
    # @return [Array<(VoD, Fixnum, Hash)>] VoD data, response status code and response headers
    def get_vo_d_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.get_vo_d ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VoDRestServiceApi.get_vo_d"
      end
      # resource path
      local_var_path = '/v2/vods/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VoD')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#get_vo_d\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    #  Get the VoD list from database. It returns 50 items at max. You can use offset value to get result page by page 
    # 
    # @param offset Offset of the list
    # @param size Number of items that will be fetched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;
    # @option opts [String] :order_by \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descening order
    # @option opts [String] :stream_id Id of the stream to filter the results by stream id
    # @option opts [String] :search Search string
    # @return [Array<VoD>]
    def get_vod_list(offset, size, opts = {})
      data, _status_code, _headers = get_vod_list_with_http_info(offset, size, opts)
      data
    end

    #  Get the VoD list from database. It returns 50 items at max. You can use offset value to get result page by page 
    # 
    # @param offset Offset of the list
    # @param size Number of items that will be fetched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;
    # @option opts [String] :order_by \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descening order
    # @option opts [String] :stream_id Id of the stream to filter the results by stream id
    # @option opts [String] :search Search string
    # @return [Array<(Array<VoD>, Fixnum, Hash)>] Array<VoD> data, response status code and response headers
    def get_vod_list_with_http_info(offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.get_vod_list ...'
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling VoDRestServiceApi.get_vod_list"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling VoDRestServiceApi.get_vod_list"
      end
      # resource path
      local_var_path = '/v2/vods/list/{offset}/{size}'.sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'streamId'] = opts[:'stream_id'] if !opts[:'stream_id'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<VoD>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#get_vod_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import VoD files from a directory and make it streamable.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :directory the full path of the directory that VoD files will be imported to datastore and linked to the streams
    # @return [Result]
    def import_vo_ds(opts = {})
      data, _status_code, _headers = import_vo_ds_with_http_info(opts)
      data
    end

    # Import VoD files from a directory and make it streamable.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :directory the full path of the directory that VoD files will be imported to datastore and linked to the streams
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def import_vo_ds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.import_vo_ds ...'
      end
      # resource path
      local_var_path = '/v2/vods/directory'

      # query parameters
      query_params = {}
      query_params[:'directory'] = opts[:'directory'] if !opts[:'directory'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#import_vo_ds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import VoDs to Stalker Portal
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def import_vo_ds_to_stalker(opts = {})
      data, _status_code, _headers = import_vo_ds_to_stalker_with_http_info(opts)
      data
    end

    # Import VoDs to Stalker Portal
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def import_vo_ds_to_stalker_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.import_vo_ds_to_stalker ...'
      end
      # resource path
      local_var_path = '/v2/vods/import-to-stalker'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#import_vo_ds_to_stalker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deprecated. Use import VoDs. Synchronize VoD Folder and add them to VoD database if any file exist and create symbolic links to that folder
    # Notes here
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def synch_user_vod_list(opts = {})
      data, _status_code, _headers = synch_user_vod_list_with_http_info(opts)
      data
    end

    # Deprecated. Use import VoDs. Synchronize VoD Folder and add them to VoD database if any file exist and create symbolic links to that folder
    # Notes here
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def synch_user_vod_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.synch_user_vod_list ...'
      end
      # resource path
      local_var_path = '/v2/vods/synch-user-vod-list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#synch_user_vod_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unlinks VoD path from streams directory and delete the database record. It does not delete the files. It only unlinks folder and delete database records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :directory the full path of the directory that imported VoD files will be deleted from database. 
    # @return [Result]
    def unlinks_vo_d(opts = {})
      data, _status_code, _headers = unlinks_vo_d_with_http_info(opts)
      data
    end

    # Unlinks VoD path from streams directory and delete the database record. It does not delete the files. It only unlinks folder and delete database records
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :directory the full path of the directory that imported VoD files will be deleted from database. 
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def unlinks_vo_d_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.unlinks_vo_d ...'
      end
      # resource path
      local_var_path = '/v2/vods/directory'

      # query parameters
      query_params = {}
      query_params[:'directory'] = opts[:'directory'] if !opts[:'directory'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#unlinks_vo_d\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload external VoD file to Ant Media Server
    # 
    # @param name the name of the VoD File
    # @param body file
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def upload_vo_d_file(name, body, opts = {})
      data, _status_code, _headers = upload_vo_d_file_with_http_info(name, body, opts)
      data
    end

    # Upload external VoD file to Ant Media Server
    # 
    # @param name the name of the VoD File
    # @param body file
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def upload_vo_d_file_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VoDRestServiceApi.upload_vo_d_file ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling VoDRestServiceApi.upload_vo_d_file"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling VoDRestServiceApi.upload_vo_d_file"
      end
      # resource path
      local_var_path = '/v2/vods/create'

      # query parameters
      query_params = {}
      query_params[:'name'] = name

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VoDRestServiceApi#upload_vo_d_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
