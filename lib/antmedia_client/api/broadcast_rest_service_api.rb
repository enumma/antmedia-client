=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'uri'

module AntmediaClient
  class BroadcastRestServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param id Broadcast id
    # @param rtmp_url RTMP url of the endpoint that stream will be republished. If required, please encode the URL
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def add_endpoint_v2(id, rtmp_url, opts = {})
      data, _status_code, _headers = add_endpoint_v2_with_http_info(id, rtmp_url, opts)
      data
    end

    # @param id Broadcast id
    # @param rtmp_url RTMP url of the endpoint that stream will be republished. If required, please encode the URL
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def add_endpoint_v2_with_http_info(id, rtmp_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.add_endpoint_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.add_endpoint_v2"
      end
      # verify the required parameter 'rtmp_url' is set
      if @api_client.config.client_side_validation && rtmp_url.nil?
        fail ArgumentError, "Missing the required parameter 'rtmp_url' when calling BroadcastRestServiceApi.add_endpoint_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/endpoint'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'rtmpUrl'] = rtmp_url

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#add_endpoint_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds a third party rtmp end point to the stream. It supports adding after broadcast is started. Resolution can be specified to send a specific adaptive resolution. If an url is already added to a stream, trying to add the same rtmp url will return false.
    # 
    # @param id Broadcast id
    # @param body RTMP url of the endpoint that stream will be republished. If required, please encode the URL
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :resolution_height Resolution height of the broadcast that is wanted to send to the RTMP endpoint. 
    # @return [Result]
    def add_endpoint_v3(id, body, opts = {})
      data, _status_code, _headers = add_endpoint_v3_with_http_info(id, body, opts)
      data
    end

    # Adds a third party rtmp end point to the stream. It supports adding after broadcast is started. Resolution can be specified to send a specific adaptive resolution. If an url is already added to a stream, trying to add the same rtmp url will return false.
    # 
    # @param id Broadcast id
    # @param body RTMP url of the endpoint that stream will be republished. If required, please encode the URL
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :resolution_height Resolution height of the broadcast that is wanted to send to the RTMP endpoint. 
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def add_endpoint_v3_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.add_endpoint_v3 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.add_endpoint_v3"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BroadcastRestServiceApi.add_endpoint_v3"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/rtmp-endpoint'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'resolutionHeight'] = opts[:'resolution_height'] if !opts[:'resolution_height'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#add_endpoint_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds the specified stream with streamId to the room. 
    # 
    # @param room_id Room id
    # @param stream_id Stream id to add to the conference room
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def add_stream_to_the_room(room_id, stream_id, opts = {})
      data, _status_code, _headers = add_stream_to_the_room_with_http_info(room_id, stream_id, opts)
      data
    end

    # Adds the specified stream with streamId to the room. 
    # 
    # @param room_id Room id
    # @param stream_id Stream id to add to the conference room
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def add_stream_to_the_room_with_http_info(room_id, stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.add_stream_to_the_room ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling BroadcastRestServiceApi.add_stream_to_the_room"
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling BroadcastRestServiceApi.add_stream_to_the_room"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms/{room_id}/add'.sub('{' + 'room_id' + '}', room_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'streamId'] = stream_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#add_stream_to_the_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a subtrack to a main track (broadcast).
    # 
    # @param id Broadcast id(main track)
    # @param id2 Subtrack Stream Id
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def add_sub_track(id, id2, opts = {})
      data, _status_code, _headers = add_sub_track_with_http_info(id, id2, opts)
      data
    end

    # Add a subtrack to a main track (broadcast).
    # 
    # @param id Broadcast id(main track)
    # @param id2 Subtrack Stream Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def add_sub_track_with_http_info(id, id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.add_sub_track ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.add_sub_track"
      end
      # verify the required parameter 'id2' is set
      if @api_client.config.client_side_validation && id2.nil?
        fail ArgumentError, "Missing the required parameter 'id2' when calling BroadcastRestServiceApi.add_sub_track"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/subtrack'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = id2

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#add_sub_track\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add Subscriber to the requested stream 
    # 
    # @param id the id of the stream
    # @param body Subscriber to be added to this stream
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def add_subscriber(id, body, opts = {})
      data, _status_code, _headers = add_subscriber_with_http_info(id, body, opts)
      data
    end

    # Add Subscriber to the requested stream 
    # 
    # @param id the id of the stream
    # @param body Subscriber to be added to this stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def add_subscriber_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.add_subscriber ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.add_subscriber"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BroadcastRestServiceApi.add_subscriber"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/subscribers'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#add_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a Broadcast, IP Camera or Stream Source and returns the full broadcast object with rtmp address and other information. The different between Broadcast and IP Camera or Stream Source is that Broadcast is ingested by Ant Media ServerIP Camera or Stream Source is pulled by Ant Media Server
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Broadcast] :body Broadcast object. Set the required fields, it may be null as well.
    # @option opts [BOOLEAN] :auto_start Only effective if stream is IP Camera or Stream Source. If it&#39;s true, it starts automatically pulling stream. Its value is false by default (default to false)
    # @return [Broadcast]
    def create_broadcast(opts = {})
      data, _status_code, _headers = create_broadcast_with_http_info(opts)
      data
    end

    # Creates a Broadcast, IP Camera or Stream Source and returns the full broadcast object with rtmp address and other information. The different between Broadcast and IP Camera or Stream Source is that Broadcast is ingested by Ant Media ServerIP Camera or Stream Source is pulled by Ant Media Server
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Broadcast] :body Broadcast object. Set the required fields, it may be null as well.
    # @option opts [BOOLEAN] :auto_start Only effective if stream is IP Camera or Stream Source. If it&#39;s true, it starts automatically pulling stream. Its value is false by default
    # @return [Array<(Broadcast, Fixnum, Hash)>] Broadcast data, response status code and response headers
    def create_broadcast_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.create_broadcast ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/create'

      # query parameters
      query_params = {}
      query_params[:'autoStart'] = opts[:'auto_start'] if !opts[:'auto_start'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Broadcast')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#create_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a conference room with the parameters. The room name is key so if this is called with the same room name then new room is overwritten to old one
    # 
    # @param body Conference Room object with start and end date
    # @param [Hash] opts the optional parameters
    # @return [ConferenceRoom]
    def create_conference_room_v2(body, opts = {})
      data, _status_code, _headers = create_conference_room_v2_with_http_info(body, opts)
      data
    end

    # Creates a conference room with the parameters. The room name is key so if this is called with the same room name then new room is overwritten to old one
    # 
    # @param body Conference Room object with start and end date
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConferenceRoom, Fixnum, Hash)>] ConferenceRoom data, response status code and response headers
    def create_conference_room_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.create_conference_room_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BroadcastRestServiceApi.create_conference_room_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConferenceRoom')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#create_conference_room_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete broadcast from data store and stop if it's broadcasting
    # 
    # @param id  Id of the broadcast
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def delete_broadcast(id, opts = {})
      data, _status_code, _headers = delete_broadcast_with_http_info(id, opts)
      data
    end

    # Delete broadcast from data store and stop if it&#39;s broadcasting
    # 
    # @param id  Id of the broadcast
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_broadcast_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.delete_broadcast ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.delete_broadcast"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#delete_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete multiple broadcasts from data store and stop if they are broadcasting
    # 
    # @param body  Id of the broadcast
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def delete_broadcasts(body, opts = {})
      data, _status_code, _headers = delete_broadcasts_with_http_info(body, opts)
      data
    end

    # Delete multiple broadcasts from data store and stop if they are broadcasting
    # 
    # @param body  Id of the broadcast
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_broadcasts_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.delete_broadcasts ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BroadcastRestServiceApi.delete_broadcasts"
      end
      # resource path
      local_var_path = '/v2/broadcasts/bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#delete_broadcasts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a conference room. The room id is key so if this is called with the same room id then new room is overwritten to old one
    # 
    # @param room_id the id of the conference room
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def delete_conference_room_v2(room_id, opts = {})
      data, _status_code, _headers = delete_conference_room_v2_with_http_info(room_id, opts)
      data
    end

    # Deletes a conference room. The room id is key so if this is called with the same room id then new room is overwritten to old one
    # 
    # @param room_id the id of the conference room
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_conference_room_v2_with_http_info(room_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.delete_conference_room_v2 ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling BroadcastRestServiceApi.delete_conference_room_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms/{room_id}'.sub('{' + 'room_id' + '}', room_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#delete_conference_room_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes the specified stream correlated with streamId in the room. 
    # 
    # @param room_id Room id
    # @param stream_id Stream id to delete from the conference room
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def delete_stream_from_the_room(room_id, stream_id, opts = {})
      data, _status_code, _headers = delete_stream_from_the_room_with_http_info(room_id, stream_id, opts)
      data
    end

    # Deletes the specified stream correlated with streamId in the room. 
    # 
    # @param room_id Room id
    # @param stream_id Stream id to delete from the conference room
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_stream_from_the_room_with_http_info(room_id, stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.delete_stream_from_the_room ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling BroadcastRestServiceApi.delete_stream_from_the_room"
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling BroadcastRestServiceApi.delete_stream_from_the_room"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms/{room_id}/delete'.sub('{' + 'room_id' + '}', room_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'streamId'] = stream_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#delete_stream_from_the_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete specific subscriber from data store for selected stream
    # 
    # @param id the id of the stream
    # @param sid the id of the subscriber
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def delete_subscriber(id, sid, opts = {})
      data, _status_code, _headers = delete_subscriber_with_http_info(id, sid, opts)
      data
    end

    # Delete specific subscriber from data store for selected stream
    # 
    # @param id the id of the stream
    # @param sid the id of the subscriber
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def delete_subscriber_with_http_info(id, sid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.delete_subscriber ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.delete_subscriber"
      end
      # verify the required parameter 'sid' is set
      if @api_client.config.client_side_validation && sid.nil?
        fail ArgumentError, "Missing the required parameter 'sid' when calling BroadcastRestServiceApi.delete_subscriber"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/subscribers/{sid}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'sid' + '}', sid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#delete_subscriber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edits previously saved conference room
    # 
    # @param room_id Room id
    # @param body Conference Room object with start and end date
    # @param [Hash] opts the optional parameters
    # @return [ConferenceRoom]
    def edit_conference_room(room_id, body, opts = {})
      data, _status_code, _headers = edit_conference_room_with_http_info(room_id, body, opts)
      data
    end

    # Edits previously saved conference room
    # 
    # @param room_id Room id
    # @param body Conference Room object with start and end date
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConferenceRoom, Fixnum, Hash)>] ConferenceRoom data, response status code and response headers
    def edit_conference_room_with_http_info(room_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.edit_conference_room ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling BroadcastRestServiceApi.edit_conference_room"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BroadcastRestServiceApi.edit_conference_room"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms/{room_id}'.sub('{' + 'room_id' + '}', room_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConferenceRoom')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#edit_conference_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set stream specific recording setting, this setting overrides general Mp4 and WebM Muxing Setting
    # 
    # @param id the id of the stream
    # @param recording_status Change recording status. If true, starts recording. If false stop recording
    # @param [Hash] opts the optional parameters
    # @option opts [String] :record_type Record type: &#39;mp4&#39; or &#39;webm&#39;. It&#39;s optional parameter.
    # @return [Result]
    def enable_recording(id, recording_status, opts = {})
      data, _status_code, _headers = enable_recording_with_http_info(id, recording_status, opts)
      data
    end

    # Set stream specific recording setting, this setting overrides general Mp4 and WebM Muxing Setting
    # 
    # @param id the id of the stream
    # @param recording_status Change recording status. If true, starts recording. If false stop recording
    # @param [Hash] opts the optional parameters
    # @option opts [String] :record_type Record type: &#39;mp4&#39; or &#39;webm&#39;. It&#39;s optional parameter.
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def enable_recording_with_http_info(id, recording_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.enable_recording ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.enable_recording"
      end
      # verify the required parameter 'recording_status' is set
      if @api_client.config.client_side_validation && recording_status.nil?
        fail ArgumentError, "Missing the required parameter 'recording_status' when calling BroadcastRestServiceApi.enable_recording"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/recording/{recording-status}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'recording-status' + '}', recording_status.to_s)

      # query parameters
      query_params = {}
      query_params[:'recordType'] = opts[:'record_type'] if !opts[:'record_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#enable_recording\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns filtered broadcast list according to type. It's useful for getting IP Camera and Stream Sources from the whole list. If you want to use sort mechanism, we recommend using Mongo DB.
    # 
    # @param offset starting point of the list
    # @param size size of the return list (max:50 )
    # @param type type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by field to sort
    # @option opts [String] :order_by asc for Ascending, desc Descending order
    # @return [Array<Broadcast>]
    def filter_broadcast_list_v2(offset, size, type, opts = {})
      data, _status_code, _headers = filter_broadcast_list_v2_with_http_info(offset, size, type, opts)
      data
    end

    # Returns filtered broadcast list according to type. It&#39;s useful for getting IP Camera and Stream Sources from the whole list. If you want to use sort mechanism, we recommend using Mongo DB.
    # 
    # @param offset starting point of the list
    # @param size size of the return list (max:50 )
    # @param type type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by field to sort
    # @option opts [String] :order_by asc for Ascending, desc Descending order
    # @return [Array<(Array<Broadcast>, Fixnum, Hash)>] Array<Broadcast> data, response status code and response headers
    def filter_broadcast_list_v2_with_http_info(offset, size, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.filter_broadcast_list_v2 ...'
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.filter_broadcast_list_v2"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.filter_broadcast_list_v2"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling BroadcastRestServiceApi.filter_broadcast_list_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/filter-list/{offset}/{size}/{type}'.sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Broadcast>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#filter_broadcast_list_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the active live streams
    # 
    # @param [Hash] opts the optional parameters
    # @return [SimpleStat]
    def get_app_live_statistics(opts = {})
      data, _status_code, _headers = get_app_live_statistics_with_http_info(opts)
      data
    end

    # Return the active live streams
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimpleStat, Fixnum, Hash)>] SimpleStat data, response status code and response headers
    def get_app_live_statistics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_app_live_statistics ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/active-live-stream-count'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SimpleStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_app_live_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get broadcast object
    # 
    # @param id id of the broadcast
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_broadcast(id, opts = {})
      get_broadcast_with_http_info(id, opts)
      nil
    end

    # Get broadcast object
    # 
    # @param id id of the broadcast
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_broadcast_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_broadcast ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_broadcast"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the broadcast list from database. It returns max 50 items at a time
    # 
    # @param offset This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.
    # @param size Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type_by Type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
    # @option opts [String] :sort_by Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;, \&quot;status\&quot;
    # @option opts [String] :order_by \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descending order
    # @option opts [String] :search Search parameter, returns specific items that contains search string
    # @return [Array<Broadcast>]
    def get_broadcast_list(offset, size, opts = {})
      data, _status_code, _headers = get_broadcast_list_with_http_info(offset, size, opts)
      data
    end

    # Gets the broadcast list from database. It returns max 50 items at a time
    # 
    # @param offset This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.
    # @param size Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type_by Type of the stream. Possible values are \&quot;liveStream\&quot;, \&quot;ipCamera\&quot;, \&quot;streamSource\&quot;, \&quot;VoD\&quot;
    # @option opts [String] :sort_by Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;, \&quot;status\&quot;
    # @option opts [String] :order_by \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descending order
    # @option opts [String] :search Search parameter, returns specific items that contains search string
    # @return [Array<(Array<Broadcast>, Fixnum, Hash)>] Array<Broadcast> data, response status code and response headers
    def get_broadcast_list_with_http_info(offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_broadcast_list ...'
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.get_broadcast_list"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.get_broadcast_list"
      end
      # resource path
      local_var_path = '/v2/broadcasts/list/{offset}/{size}'.sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}
      query_params[:'type_by'] = opts[:'type_by'] if !opts[:'type_by'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Broadcast>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_broadcast_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the broadcast live statistics total RTMP watcher count, total HLS watcher count, total WebRTC watcher count
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [BroadcastStatistics]
    def get_broadcast_statistics(id, opts = {})
      data, _status_code, _headers = get_broadcast_statistics_with_http_info(id, opts)
      data
    end

    # Get the broadcast live statistics total RTMP watcher count, total HLS watcher count, total WebRTC watcher count
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(BroadcastStatistics, Fixnum, Hash)>] BroadcastStatistics data, response status code and response headers
    def get_broadcast_statistics_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_broadcast_statistics ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_broadcast_statistics"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/broadcast-statistics'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BroadcastStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_broadcast_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the total broadcast live statistics total HLS watcher count, total WebRTC watcher count
    # 
    # @param [Hash] opts the optional parameters
    # @return [BroadcastStatistics]
    def get_broadcast_total_statistics(opts = {})
      data, _status_code, _headers = get_broadcast_total_statistics_with_http_info(opts)
      data
    end

    # Get the total broadcast live statistics total HLS watcher count, total WebRTC watcher count
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BroadcastStatistics, Fixnum, Hash)>] BroadcastStatistics data, response status code and response headers
    def get_broadcast_total_statistics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_broadcast_total_statistics ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/total-broadcast-statistics'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BroadcastStatistics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_broadcast_total_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get IP Camera Error after connection failure. If returns true, it means there is an error. If returns false, there is no error
    # Notes here
    # @param stream_id StreamId of the IP Camera Streaming.
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_camera_error_v2(stream_id, opts = {})
      data, _status_code, _headers = get_camera_error_v2_with_http_info(stream_id, opts)
      data
    end

    # Get IP Camera Error after connection failure. If returns true, it means there is an error. If returns false, there is no error
    # Notes here
    # @param stream_id StreamId of the IP Camera Streaming.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_camera_error_v2_with_http_info(stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_camera_error_v2 ...'
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling BroadcastRestServiceApi.get_camera_error_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{streamId}/ip-camera-error'.sub('{' + 'streamId' + '}', stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_camera_error_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get conference room object
    # 
    # @param room_id id of the room
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_conference_room(room_id, opts = {})
      get_conference_room_with_http_info(room_id, opts)
      nil
    end

    # Get conference room object
    # 
    # @param room_id id of the room
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_conference_room_with_http_info(room_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_conference_room ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling BroadcastRestServiceApi.get_conference_room"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms/{roomId}'.sub('{' + 'roomId' + '}', room_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_conference_room\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the conference room list from database
    # 
    # @param offset This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.
    # @param size Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by field to sort
    # @option opts [String] :order_by asc for Ascending, desc Descending order
    # @option opts [String] :search Search parameter, returns specific items that contains search string
    # @return [Array<ConferenceRoom>]
    def get_conference_room_list(offset, size, opts = {})
      data, _status_code, _headers = get_conference_room_list_with_http_info(offset, size, opts)
      data
    end

    # Gets the conference room list from database
    # 
    # @param offset This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.
    # @param size Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by field to sort
    # @option opts [String] :order_by asc for Ascending, desc Descending order
    # @option opts [String] :search Search parameter, returns specific items that contains search string
    # @return [Array<(Array<ConferenceRoom>, Fixnum, Hash)>] Array<ConferenceRoom> data, response status code and response headers
    def get_conference_room_list_with_http_info(offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_conference_room_list ...'
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.get_conference_room_list"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.get_conference_room_list"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms/list/{offset}/{size}'.sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ConferenceRoom>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_conference_room_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detected objects from the stream based on offset and size
    # 
    # @param id the id of the stream
    # @param offset starting point of the list
    # @param size total size of the return list
    # @param [Hash] opts the optional parameters
    # @return [Array<TensorFlowObject>]
    def get_detection_list_v2(id, offset, size, opts = {})
      data, _status_code, _headers = get_detection_list_v2_with_http_info(id, offset, size, opts)
      data
    end

    # Get detected objects from the stream based on offset and size
    # 
    # @param id the id of the stream
    # @param offset starting point of the list
    # @param size total size of the return list
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TensorFlowObject>, Fixnum, Hash)>] Array<TensorFlowObject> data, response status code and response headers
    def get_detection_list_v2_with_http_info(id, offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_detection_list_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_detection_list_v2"
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.get_detection_list_v2"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.get_detection_list_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/detections/{offset}/{size}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TensorFlowObject>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_detection_list_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generates JWT token for specified stream. It's not required to let the server generate JWT. Generally JWT tokens should be generated on the client side.
    # 
    # @param id The id of the stream
    # @param expire_date The expire time of the token. It&#39;s in unix timestamp seconds.
    # @param type Type of the JWT token. It may be play or publish 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :room_id Room Id that token belongs to. It&#39;s not mandatory 
    # @return [Token]
    def get_jwt_token_v2(id, expire_date, type, opts = {})
      data, _status_code, _headers = get_jwt_token_v2_with_http_info(id, expire_date, type, opts)
      data
    end

    # Generates JWT token for specified stream. It&#39;s not required to let the server generate JWT. Generally JWT tokens should be generated on the client side.
    # 
    # @param id The id of the stream
    # @param expire_date The expire time of the token. It&#39;s in unix timestamp seconds.
    # @param type Type of the JWT token. It may be play or publish 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :room_id Room Id that token belongs to. It&#39;s not mandatory 
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def get_jwt_token_v2_with_http_info(id, expire_date, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_jwt_token_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_jwt_token_v2"
      end
      # verify the required parameter 'expire_date' is set
      if @api_client.config.client_side_validation && expire_date.nil?
        fail ArgumentError, "Missing the required parameter 'expire_date' when calling BroadcastRestServiceApi.get_jwt_token_v2"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling BroadcastRestServiceApi.get_jwt_token_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/jwt-token'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expireDate'] = expire_date
      query_params[:'type'] = type
      query_params[:'roomId'] = opts[:'room_id'] if !opts[:'room_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_jwt_token_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get total number of detected objects
    # 
    # @param id id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def get_object_detected_total(id, opts = {})
      data, _status_code, _headers = get_object_detected_total_with_http_info(id, opts)
      data
    end

    # Get total number of detected objects
    # 
    # @param id id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def get_object_detected_total_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_object_detected_total ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_object_detected_total"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/detections/count'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_object_detected_total\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get The Profile List for an ONVIF IP Cameras
    # Notes here
    # @param id The id of the IP Camera
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def get_onvif_device_profiles(id, opts = {})
      data, _status_code, _headers = get_onvif_device_profiles_with_http_info(id, opts)
      data
    end

    # Get The Profile List for an ONVIF IP Cameras
    # Notes here
    # @param id The id of the IP Camera
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def get_onvif_device_profiles_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_onvif_device_profiles ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_onvif_device_profiles"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/ip-camera/device-profiles'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_onvif_device_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the streams Ids in the room.
    # 
    # @param room_id Room id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :stream_id If Stream Id is entered, that stream id will be isolated from the result
    # @return [Array<String>]
    def get_room_info(room_id, opts = {})
      data, _status_code, _headers = get_room_info_with_http_info(room_id, opts)
      data
    end

    # Returns the streams Ids in the room.
    # 
    # @param room_id Room id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :stream_id If Stream Id is entered, that stream id will be isolated from the result
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_room_info_with_http_info(room_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_room_info ...'
      end
      # verify the required parameter 'room_id' is set
      if @api_client.config.client_side_validation && room_id.nil?
        fail ArgumentError, "Missing the required parameter 'room_id' when calling BroadcastRestServiceApi.get_room_info"
      end
      # resource path
      local_var_path = '/v2/broadcasts/conference-rooms/{room_id}/room-info'.sub('{' + 'room_id' + '}', room_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'streamId'] = opts[:'stream_id'] if !opts[:'stream_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_room_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get RTMP to WebRTC path stats in general
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [RTMPToWebRTCStats]
    def get_rtmpto_web_rtc_stats(id, opts = {})
      data, _status_code, _headers = get_rtmpto_web_rtc_stats_with_http_info(id, opts)
      data
    end

    # Get RTMP to WebRTC path stats in general
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(RTMPToWebRTCStats, Fixnum, Hash)>] RTMPToWebRTCStats data, response status code and response headers
    def get_rtmpto_web_rtc_stats_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_rtmpto_web_rtc_stats ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_rtmpto_web_rtc_stats"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/rtmp-to-webrtc-stats'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RTMPToWebRTCStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_rtmpto_web_rtc_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the stream info(width, height, bitrates and video codec) of the stream
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<BasicStreamInfo>]
    def get_stream_info(id, opts = {})
      data, _status_code, _headers = get_stream_info_with_http_info(id, opts)
      data
    end

    # Returns the stream info(width, height, bitrates and video codec) of the stream
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BasicStreamInfo>, Fixnum, Hash)>] Array<BasicStreamInfo> data, response status code and response headers
    def get_stream_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_stream_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_stream_info"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/stream-info'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BasicStreamInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_stream_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generates random one-time token for specified stream
    # 
    # @param id The id of the stream
    # @param expire_date The expire time of the token. It&#39;s in unix timestamp seconds
    # @param type Type of the token. It may be play or publish 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :room_id Room Id that token belongs to. It&#39;s not mandatory 
    # @return [Token]
    def get_token_v2(id, expire_date, type, opts = {})
      data, _status_code, _headers = get_token_v2_with_http_info(id, expire_date, type, opts)
      data
    end

    # Generates random one-time token for specified stream
    # 
    # @param id The id of the stream
    # @param expire_date The expire time of the token. It&#39;s in unix timestamp seconds
    # @param type Type of the token. It may be play or publish 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :room_id Room Id that token belongs to. It&#39;s not mandatory 
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def get_token_v2_with_http_info(id, expire_date, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_token_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.get_token_v2"
      end
      # verify the required parameter 'expire_date' is set
      if @api_client.config.client_side_validation && expire_date.nil?
        fail ArgumentError, "Missing the required parameter 'expire_date' when calling BroadcastRestServiceApi.get_token_v2"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling BroadcastRestServiceApi.get_token_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/token'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expireDate'] = expire_date
      query_params[:'type'] = type
      query_params[:'roomId'] = opts[:'room_id'] if !opts[:'room_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_token_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the total number of broadcasts
    # 
    # @param [Hash] opts the optional parameters
    # @return [SimpleStat]
    def get_total_broadcast_number_v2(opts = {})
      data, _status_code, _headers = get_total_broadcast_number_v2_with_http_info(opts)
      data
    end

    # Get the total number of broadcasts
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimpleStat, Fixnum, Hash)>] SimpleStat data, response status code and response headers
    def get_total_broadcast_number_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_total_broadcast_number_v2 ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/count'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SimpleStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_total_broadcast_number_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the number of broadcasts depending on the searched items 
    # 
    # @param search Search parameter to get the number of items including it 
    # @param [Hash] opts the optional parameters
    # @return [SimpleStat]
    def get_total_broadcast_number_v2_0(search, opts = {})
      data, _status_code, _headers = get_total_broadcast_number_v2_0_with_http_info(search, opts)
      data
    end

    # Get the number of broadcasts depending on the searched items 
    # 
    # @param search Search parameter to get the number of items including it 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimpleStat, Fixnum, Hash)>] SimpleStat data, response status code and response headers
    def get_total_broadcast_number_v2_0_with_http_info(search, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_total_broadcast_number_v2_0 ...'
      end
      # verify the required parameter 'search' is set
      if @api_client.config.client_side_validation && search.nil?
        fail ArgumentError, "Missing the required parameter 'search' when calling BroadcastRestServiceApi.get_total_broadcast_number_v2_0"
      end
      # resource path
      local_var_path = '/v2/broadcasts/count/{search}'.sub('{' + 'search' + '}', search.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SimpleStat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_total_broadcast_number_v2_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get WebRTC Client Statistics such as : Audio bitrate, Video bitrate, Target bitrate, Video Sent Period etc.
    # 
    # @param offset offset of the list
    # @param size Number of items that will be fetched
    # @param stream_id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<WebRTCClientStats>]
    def get_web_rtc_client_stats_list_v2(offset, size, stream_id, opts = {})
      data, _status_code, _headers = get_web_rtc_client_stats_list_v2_with_http_info(offset, size, stream_id, opts)
      data
    end

    # Get WebRTC Client Statistics such as : Audio bitrate, Video bitrate, Target bitrate, Video Sent Period etc.
    # 
    # @param offset offset of the list
    # @param size Number of items that will be fetched
    # @param stream_id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WebRTCClientStats>, Fixnum, Hash)>] Array<WebRTCClientStats> data, response status code and response headers
    def get_web_rtc_client_stats_list_v2_with_http_info(offset, size, stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_web_rtc_client_stats_list_v2 ...'
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.get_web_rtc_client_stats_list_v2"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.get_web_rtc_client_stats_list_v2"
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling BroadcastRestServiceApi.get_web_rtc_client_stats_list_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{stream_id}/webrtc-client-stats/{offset}/{size}'.sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s).sub('{' + 'stream_id' + '}', stream_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WebRTCClientStats>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_web_rtc_client_stats_list_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get WebRTC Low Level receive stats in general
    # 
    # @param [Hash] opts the optional parameters
    # @return [WebRTCSendStats]
    def get_web_rtc_low_level_receive_stats(opts = {})
      data, _status_code, _headers = get_web_rtc_low_level_receive_stats_with_http_info(opts)
      data
    end

    # Get WebRTC Low Level receive stats in general
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebRTCSendStats, Fixnum, Hash)>] WebRTCSendStats data, response status code and response headers
    def get_web_rtc_low_level_receive_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_web_rtc_low_level_receive_stats ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/webrtc-receive-low-level-stats'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebRTCSendStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_web_rtc_low_level_receive_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get WebRTC Low Level Send stats in general
    # 
    # @param [Hash] opts the optional parameters
    # @return [WebRTCSendStats]
    def get_web_rtc_low_level_send_stats(opts = {})
      data, _status_code, _headers = get_web_rtc_low_level_send_stats_with_http_info(opts)
      data
    end

    # Get WebRTC Low Level Send stats in general
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebRTCSendStats, Fixnum, Hash)>] WebRTCSendStats data, response status code and response headers
    def get_web_rtc_low_level_send_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_web_rtc_low_level_send_stats ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/webrtc-send-low-level-stats'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebRTCSendStats')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_web_rtc_low_level_send_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param offset This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.
    # @param size Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by field to sort
    # @option opts [String] :order_by asc for Ascending, desc Descending order
    # @option opts [String] :search Search parameter, returns specific items that contains search string
    # @return [Array<WebRTCViewerInfo>]
    def get_web_rtc_viewer_list(offset, size, opts = {})
      data, _status_code, _headers = get_web_rtc_viewer_list_with_http_info(offset, size, opts)
      data
    end

    # @param offset This is the offset of the list, it is useful for pagination. If you want to use sort mechanism, we recommend using Mongo DB.
    # @param size Number of items that will be fetched. If there is not enough item in the datastore, returned list size may less then this value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by field to sort
    # @option opts [String] :order_by asc for Ascending, desc Descending order
    # @option opts [String] :search Search parameter, returns specific items that contains search string
    # @return [Array<(Array<WebRTCViewerInfo>, Fixnum, Hash)>] Array<WebRTCViewerInfo> data, response status code and response headers
    def get_web_rtc_viewer_list_with_http_info(offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.get_web_rtc_viewer_list ...'
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.get_web_rtc_viewer_list"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.get_web_rtc_viewer_list"
      end
      # resource path
      local_var_path = '/v2/broadcasts/webrtc-viewers/list/{offset}/{size}'.sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WebRTCViewerInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#get_web_rtc_viewer_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import Live Streams to Stalker Portal
    # 
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def import_live_streams2_stalker_v2(opts = {})
      data, _status_code, _headers = import_live_streams2_stalker_v2_with_http_info(opts)
      data
    end

    # Import Live Streams to Stalker Portal
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def import_live_streams2_stalker_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.import_live_streams2_stalker_v2 ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/import-to-stalker'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#import_live_streams2_stalker_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the all subscriber statistics of the requested stream
    # 
    # @param id the id of the stream
    # @param offset the starting point of the list
    # @param size size of the return list (max:50 )
    # @param [Hash] opts the optional parameters
    # @return [Array<SubscriberStats>]
    def list_subscriber_stats_v2(id, offset, size, opts = {})
      data, _status_code, _headers = list_subscriber_stats_v2_with_http_info(id, offset, size, opts)
      data
    end

    # Get the all subscriber statistics of the requested stream
    # 
    # @param id the id of the stream
    # @param offset the starting point of the list
    # @param size size of the return list (max:50 )
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SubscriberStats>, Fixnum, Hash)>] Array<SubscriberStats> data, response status code and response headers
    def list_subscriber_stats_v2_with_http_info(id, offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.list_subscriber_stats_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.list_subscriber_stats_v2"
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.list_subscriber_stats_v2"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.list_subscriber_stats_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/subscriber-stats/list/{offset}/{size}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SubscriberStats>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#list_subscriber_stats_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the all subscribers of the requested stream
    # 
    # @param id the id of the stream
    # @param offset the starting point of the list
    # @param size size of the return list (max:50 )
    # @param [Hash] opts the optional parameters
    # @return [Array<Subscriber>]
    def list_subscriber_v2(id, offset, size, opts = {})
      data, _status_code, _headers = list_subscriber_v2_with_http_info(id, offset, size, opts)
      data
    end

    # Get the all subscribers of the requested stream
    # 
    # @param id the id of the stream
    # @param offset the starting point of the list
    # @param size size of the return list (max:50 )
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Subscriber>, Fixnum, Hash)>] Array<Subscriber> data, response status code and response headers
    def list_subscriber_v2_with_http_info(id, offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.list_subscriber_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.list_subscriber_v2"
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.list_subscriber_v2"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.list_subscriber_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/subscribers/list/{offset}/{size}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Subscriber>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#list_subscriber_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the all tokens of requested stream
    # 
    # @param id the id of the stream
    # @param offset the starting point of the list
    # @param size size of the return list (max:50 )
    # @param [Hash] opts the optional parameters
    # @return [Array<Token>]
    def list_tokens_v2(id, offset, size, opts = {})
      data, _status_code, _headers = list_tokens_v2_with_http_info(id, offset, size, opts)
      data
    end

    # Get the all tokens of requested stream
    # 
    # @param id the id of the stream
    # @param offset the starting point of the list
    # @param size size of the return list (max:50 )
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Token>, Fixnum, Hash)>] Array<Token> data, response status code and response headers
    def list_tokens_v2_with_http_info(id, offset, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.list_tokens_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.list_tokens_v2"
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling BroadcastRestServiceApi.list_tokens_v2"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling BroadcastRestServiceApi.list_tokens_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/tokens/list/{offset}/{size}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'offset' + '}', offset.to_s).sub('{' + 'size' + '}', size.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Token>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#list_tokens_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Move IP Camera. It support continuous, relative and absolute move. By default it's relative move.Movement parameters should be given according to movement type. Generally here are the values For Absolute move, value X and value Y is between -1.0f and 1.0f. Zooom value is between 0.0f and 1.0fFor Relative move, value X, value Y and Zoom Value is between -1.0f and 1.0fFor Continous move,value X, value Y and Zoom Value is between -1.0f and 1.0f 
    # 
    # @param id The id of the IP Camera
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :value_x Movement in X direction. If not specified, it&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
    # @option opts [Float] :value_y Movement in Y direction. If not specified, it&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
    # @option opts [Float] :value_z Movement in Zoom. If not specified, it&#39;s assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f 
    # @option opts [String] :movement Movement type. It can be absolute, relative or continuous. If not specified, it&#39;s relative
    # @return [Result]
    def move_ip_camera(id, opts = {})
      data, _status_code, _headers = move_ip_camera_with_http_info(id, opts)
      data
    end

    # Move IP Camera. It support continuous, relative and absolute move. By default it&#39;s relative move.Movement parameters should be given according to movement type. Generally here are the values For Absolute move, value X and value Y is between -1.0f and 1.0f. Zooom value is between 0.0f and 1.0fFor Relative move, value X, value Y and Zoom Value is between -1.0f and 1.0fFor Continous move,value X, value Y and Zoom Value is between -1.0f and 1.0f 
    # 
    # @param id The id of the IP Camera
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :value_x Movement in X direction. If not specified, it&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
    # @option opts [Float] :value_y Movement in Y direction. If not specified, it&#39;s assumed to be zero. Valid ranges between -1.0f and 1.0f for all movements 
    # @option opts [Float] :value_z Movement in Zoom. If not specified, it&#39;s assumed to be zero. Valid ranges for relative and continous move is between -1.0f and 1.0f. For absolute move between 0.0f and 1.0f 
    # @option opts [String] :movement Movement type. It can be absolute, relative or continuous. If not specified, it&#39;s relative
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def move_ip_camera_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.move_ip_camera ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.move_ip_camera"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/ip-camera/move'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'valueX'] = opts[:'value_x'] if !opts[:'value_x'].nil?
      query_params[:'valueY'] = opts[:'value_y'] if !opts[:'value_y'].nil?
      query_params[:'valueZ'] = opts[:'value_z'] if !opts[:'value_z'].nil?
      query_params[:'movement'] = opts[:'movement'] if !opts[:'movement'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#move_ip_camera\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id Broadcast id
    # @param rtmp_url RTMP url of the endpoint that will be stopped.
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def remove_endpoint(id, rtmp_url, opts = {})
      data, _status_code, _headers = remove_endpoint_with_http_info(id, rtmp_url, opts)
      data
    end

    # @param id Broadcast id
    # @param rtmp_url RTMP url of the endpoint that will be stopped.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def remove_endpoint_with_http_info(id, rtmp_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.remove_endpoint ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.remove_endpoint"
      end
      # verify the required parameter 'rtmp_url' is set
      if @api_client.config.client_side_validation && rtmp_url.nil?
        fail ArgumentError, "Missing the required parameter 'rtmp_url' when calling BroadcastRestServiceApi.remove_endpoint"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/endpoint'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'rtmpUrl'] = rtmp_url

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#remove_endpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove third pary rtmp end point from the stream. For the stream that is broadcasting, it will stop immediately
    # 
    # @param id Broadcast id
    # @param endpoint_service_id RTMP url of the endpoint that will be stopped.
    # @param resolution_height Resolution specifier if endpoint has been added with resolution. Only applicable if user added RTMP endpoint with a resolution speficier. Otherwise won&#39;t work and won&#39;t remove the endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def remove_endpoint_v2(id, endpoint_service_id, resolution_height, opts = {})
      data, _status_code, _headers = remove_endpoint_v2_with_http_info(id, endpoint_service_id, resolution_height, opts)
      data
    end

    # Remove third pary rtmp end point from the stream. For the stream that is broadcasting, it will stop immediately
    # 
    # @param id Broadcast id
    # @param endpoint_service_id RTMP url of the endpoint that will be stopped.
    # @param resolution_height Resolution specifier if endpoint has been added with resolution. Only applicable if user added RTMP endpoint with a resolution speficier. Otherwise won&#39;t work and won&#39;t remove the endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def remove_endpoint_v2_with_http_info(id, endpoint_service_id, resolution_height, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.remove_endpoint_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.remove_endpoint_v2"
      end
      # verify the required parameter 'endpoint_service_id' is set
      if @api_client.config.client_side_validation && endpoint_service_id.nil?
        fail ArgumentError, "Missing the required parameter 'endpoint_service_id' when calling BroadcastRestServiceApi.remove_endpoint_v2"
      end
      # verify the required parameter 'resolution_height' is set
      if @api_client.config.client_side_validation && resolution_height.nil?
        fail ArgumentError, "Missing the required parameter 'resolution_height' when calling BroadcastRestServiceApi.remove_endpoint_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/rtmp-endpoint'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'endpointServiceId'] = endpoint_service_id
      query_params[:'resolutionHeight'] = resolution_height

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#remove_endpoint_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    #  Removes all subscriber related with the requested stream
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def revoke_subscribers(id, opts = {})
      data, _status_code, _headers = revoke_subscribers_with_http_info(id, opts)
      data
    end

    #  Removes all subscriber related with the requested stream
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def revoke_subscribers_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.revoke_subscribers ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.revoke_subscribers"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/subscribers'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#revoke_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    #  Removes all tokens related with requested stream
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def revoke_tokens_v2(id, opts = {})
      data, _status_code, _headers = revoke_tokens_v2_with_http_info(id, opts)
      data
    end

    #  Removes all tokens related with requested stream
    # 
    # @param id the id of the stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def revoke_tokens_v2_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.revoke_tokens_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.revoke_tokens_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/tokens'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#revoke_tokens_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Discovered ONVIF IP Cameras, this service perform a discovery inside of internal network and get automatically  ONVIF enabled camera information
    # Notes here
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def search_onvif_devices_v2(opts = {})
      data, _status_code, _headers = search_onvif_devices_v2_with_http_info(opts)
      data
    end

    # Get Discovered ONVIF IP Cameras, this service perform a discovery inside of internal network and get automatically  ONVIF enabled camera information
    # Notes here
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def search_onvif_devices_v2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.search_onvif_devices_v2 ...'
      end
      # resource path
      local_var_path = '/v2/broadcasts/onvif-devices'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#search_onvif_devices_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send stream participants a message through Data Channel in a WebRTC stream
    # 
    # @param body Message through Data Channel which will be sent to all WebRTC stream participants
    # @param id Broadcast id
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def send_message(body, id, opts = {})
      data, _status_code, _headers = send_message_with_http_info(body, id, opts)
      data
    end

    # Send stream participants a message through Data Channel in a WebRTC stream
    # 
    # @param body Message through Data Channel which will be sent to all WebRTC stream participants
    # @param id Broadcast id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def send_message_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.send_message ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BroadcastRestServiceApi.send_message"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.send_message"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/data'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#send_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start streaming sources(IP Cameras, Stream Sources, PlayLists) 
    # 
    # @param id the id of the stream. The broadcast type should be IP Camera or Stream Source otherwise it does not work
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def start_stream_source_v2(id, opts = {})
      data, _status_code, _headers = start_stream_source_v2_with_http_info(id, opts)
      data
    end

    # Start streaming sources(IP Cameras, Stream Sources, PlayLists) 
    # 
    # @param id the id of the stream. The broadcast type should be IP Camera or Stream Source otherwise it does not work
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def start_stream_source_v2_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.start_stream_source_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.start_stream_source_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/start'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#start_stream_source_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Stop move for IP Camera.
    # 
    # @param id the id of the IP Camera
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def stop_move(id, opts = {})
      data, _status_code, _headers = stop_move_with_http_info(id, opts)
      data
    end

    # Stop move for IP Camera.
    # 
    # @param id the id of the IP Camera
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def stop_move_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.stop_move ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.stop_move"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/ip-camera/stop-move'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#stop_move\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Stop player with a specified id
    # 
    # @param webrtc_viewer_id the id of the webrtc viewer.
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def stop_playing(webrtc_viewer_id, opts = {})
      data, _status_code, _headers = stop_playing_with_http_info(webrtc_viewer_id, opts)
      data
    end

    # Stop player with a specified id
    # 
    # @param webrtc_viewer_id the id of the webrtc viewer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def stop_playing_with_http_info(webrtc_viewer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.stop_playing ...'
      end
      # verify the required parameter 'webrtc_viewer_id' is set
      if @api_client.config.client_side_validation && webrtc_viewer_id.nil?
        fail ArgumentError, "Missing the required parameter 'webrtc_viewer_id' when calling BroadcastRestServiceApi.stop_playing"
      end
      # resource path
      local_var_path = '/v2/broadcasts/webrtc-viewers/{webrtc-viewer-id}/stop'.sub('{' + 'webrtc-viewer-id' + '}', webrtc_viewer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#stop_playing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Stop streaming for the active stream. It both stops ingested(RTMP, WebRTC) or pulled stream sources (IP Cameras and Stream Sources)
    # 
    # @param id the id of the broadcast.
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def stop_streaming_v2(id, opts = {})
      data, _status_code, _headers = stop_streaming_v2_with_http_info(id, opts)
      data
    end

    # Stop streaming for the active stream. It both stops ingested(RTMP, WebRTC) or pulled stream sources (IP Cameras and Stream Sources)
    # 
    # @param id the id of the broadcast.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def stop_streaming_v2_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.stop_streaming_v2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.stop_streaming_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}/stop'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#stop_streaming_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the Broadcast objects fields if it's not null. The updated fields are as follows: name, description, userName, password, IP address, streamUrl of the broadcast. It also updates the social endpoints
    # 
    # @param id Broadcast id
    # @param [Hash] opts the optional parameters
    # @option opts [Broadcast] :body Broadcast object with the updates
    # @return [Result]
    def update_broadcast(id, opts = {})
      data, _status_code, _headers = update_broadcast_with_http_info(id, opts)
      data
    end

    # Updates the Broadcast objects fields if it&#39;s not null. The updated fields are as follows: name, description, userName, password, IP address, streamUrl of the broadcast. It also updates the social endpoints
    # 
    # @param id Broadcast id
    # @param [Hash] opts the optional parameters
    # @option opts [Broadcast] :body Broadcast object with the updates
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def update_broadcast_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.update_broadcast ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BroadcastRestServiceApi.update_broadcast"
      end
      # resource path
      local_var_path = '/v2/broadcasts/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#update_broadcast\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform validation of token for requested stream. If validated, success field is true, not validated success field false
    # 
    # @param body Token to be validated
    # @param [Hash] opts the optional parameters
    # @return [Result]
    def validate_token_v2(body, opts = {})
      data, _status_code, _headers = validate_token_v2_with_http_info(body, opts)
      data
    end

    # Perform validation of token for requested stream. If validated, success field is true, not validated success field false
    # 
    # @param body Token to be validated
    # @param [Hash] opts the optional parameters
    # @return [Array<(Result, Fixnum, Hash)>] Result data, response status code and response headers
    def validate_token_v2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BroadcastRestServiceApi.validate_token_v2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BroadcastRestServiceApi.validate_token_v2"
      end
      # resource path
      local_var_path = '/v2/broadcasts/validate-token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Result')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BroadcastRestServiceApi#validate_token_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
