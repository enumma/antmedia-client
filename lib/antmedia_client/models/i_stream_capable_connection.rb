=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class IStreamCapableConnection
    attr_accessor :streams_map

    attr_accessor :type

    attr_accessor :path

    attr_accessor :protocol

    attr_accessor :host

    attr_accessor :encoding

    attr_accessor :scope

    attr_accessor :client

    attr_accessor :connected

    attr_accessor :stream_id

    attr_accessor :remote_address

    attr_accessor :read_bytes

    attr_accessor :written_bytes

    attr_accessor :connect_params

    attr_accessor :remote_addresses

    attr_accessor :remote_port

    attr_accessor :session_id

    attr_accessor :read_messages

    attr_accessor :written_messages

    attr_accessor :dropped_messages

    attr_accessor :pending_messages

    attr_accessor :client_bytes_read

    attr_accessor :last_ping_time

    attr_accessor :basic_scopes

    attr_accessor :attributes

    attr_accessor :attribute_names

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'streams_map' => :'streamsMap',
        :'type' => :'type',
        :'path' => :'path',
        :'protocol' => :'protocol',
        :'host' => :'host',
        :'encoding' => :'encoding',
        :'scope' => :'scope',
        :'client' => :'client',
        :'connected' => :'connected',
        :'stream_id' => :'streamId',
        :'remote_address' => :'remoteAddress',
        :'read_bytes' => :'readBytes',
        :'written_bytes' => :'writtenBytes',
        :'connect_params' => :'connectParams',
        :'remote_addresses' => :'remoteAddresses',
        :'remote_port' => :'remotePort',
        :'session_id' => :'sessionId',
        :'read_messages' => :'readMessages',
        :'written_messages' => :'writtenMessages',
        :'dropped_messages' => :'droppedMessages',
        :'pending_messages' => :'pendingMessages',
        :'client_bytes_read' => :'clientBytesRead',
        :'last_ping_time' => :'lastPingTime',
        :'basic_scopes' => :'basicScopes',
        :'attributes' => :'attributes',
        :'attribute_names' => :'attributeNames'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'streams_map' => :'Hash<String, IClientStream>',
        :'type' => :'String',
        :'path' => :'String',
        :'protocol' => :'String',
        :'host' => :'String',
        :'encoding' => :'String',
        :'scope' => :'IScope',
        :'client' => :'IClient',
        :'connected' => :'BOOLEAN',
        :'stream_id' => :'Number',
        :'remote_address' => :'String',
        :'read_bytes' => :'Integer',
        :'written_bytes' => :'Integer',
        :'connect_params' => :'Hash<String, Object>',
        :'remote_addresses' => :'Array<String>',
        :'remote_port' => :'Integer',
        :'session_id' => :'String',
        :'read_messages' => :'Integer',
        :'written_messages' => :'Integer',
        :'dropped_messages' => :'Integer',
        :'pending_messages' => :'Integer',
        :'client_bytes_read' => :'Integer',
        :'last_ping_time' => :'Integer',
        :'basic_scopes' => :'IteratorIBasicScope',
        :'attributes' => :'Hash<String, Object>',
        :'attribute_names' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'streamsMap')
        if (value = attributes[:'streamsMap']).is_a?(Hash)
          self.streams_map = value
        end
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.has_key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.has_key?(:'encoding')
        self.encoding = attributes[:'encoding']
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'client')
        self.client = attributes[:'client']
      end

      if attributes.has_key?(:'connected')
        self.connected = attributes[:'connected']
      end

      if attributes.has_key?(:'streamId')
        self.stream_id = attributes[:'streamId']
      end

      if attributes.has_key?(:'remoteAddress')
        self.remote_address = attributes[:'remoteAddress']
      end

      if attributes.has_key?(:'readBytes')
        self.read_bytes = attributes[:'readBytes']
      end

      if attributes.has_key?(:'writtenBytes')
        self.written_bytes = attributes[:'writtenBytes']
      end

      if attributes.has_key?(:'connectParams')
        if (value = attributes[:'connectParams']).is_a?(Hash)
          self.connect_params = value
        end
      end

      if attributes.has_key?(:'remoteAddresses')
        if (value = attributes[:'remoteAddresses']).is_a?(Array)
          self.remote_addresses = value
        end
      end

      if attributes.has_key?(:'remotePort')
        self.remote_port = attributes[:'remotePort']
      end

      if attributes.has_key?(:'sessionId')
        self.session_id = attributes[:'sessionId']
      end

      if attributes.has_key?(:'readMessages')
        self.read_messages = attributes[:'readMessages']
      end

      if attributes.has_key?(:'writtenMessages')
        self.written_messages = attributes[:'writtenMessages']
      end

      if attributes.has_key?(:'droppedMessages')
        self.dropped_messages = attributes[:'droppedMessages']
      end

      if attributes.has_key?(:'pendingMessages')
        self.pending_messages = attributes[:'pendingMessages']
      end

      if attributes.has_key?(:'clientBytesRead')
        self.client_bytes_read = attributes[:'clientBytesRead']
      end

      if attributes.has_key?(:'lastPingTime')
        self.last_ping_time = attributes[:'lastPingTime']
      end

      if attributes.has_key?(:'basicScopes')
        self.basic_scopes = attributes[:'basicScopes']
      end

      if attributes.has_key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Hash)
          self.attributes = value
        end
      end

      if attributes.has_key?(:'attributeNames')
        if (value = attributes[:'attributeNames']).is_a?(Array)
          self.attribute_names = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      encoding_validator = EnumAttributeValidator.new('String', ['AMF0', 'AMF3', 'WEBSOCKET', 'SOCKETIO', 'RTP', 'SRTP', 'RAW'])
      return false unless encoding_validator.valid?(@encoding)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] encoding Object to be assigned
    def encoding=(encoding)
      validator = EnumAttributeValidator.new('String', ['AMF0', 'AMF3', 'WEBSOCKET', 'SOCKETIO', 'RTP', 'SRTP', 'RAW'])
      unless validator.valid?(encoding)
        fail ArgumentError, 'invalid value for "encoding", must be one of #{validator.allowable_values}.'
      end
      @encoding = encoding
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          streams_map == o.streams_map &&
          type == o.type &&
          path == o.path &&
          protocol == o.protocol &&
          host == o.host &&
          encoding == o.encoding &&
          scope == o.scope &&
          client == o.client &&
          connected == o.connected &&
          stream_id == o.stream_id &&
          remote_address == o.remote_address &&
          read_bytes == o.read_bytes &&
          written_bytes == o.written_bytes &&
          connect_params == o.connect_params &&
          remote_addresses == o.remote_addresses &&
          remote_port == o.remote_port &&
          session_id == o.session_id &&
          read_messages == o.read_messages &&
          written_messages == o.written_messages &&
          dropped_messages == o.dropped_messages &&
          pending_messages == o.pending_messages &&
          client_bytes_read == o.client_bytes_read &&
          last_ping_time == o.last_ping_time &&
          basic_scopes == o.basic_scopes &&
          attributes == o.attributes &&
          attribute_names == o.attribute_names
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [streams_map, type, path, protocol, host, encoding, scope, client, connected, stream_id, remote_address, read_bytes, written_bytes, connect_params, remote_addresses, remote_port, session_id, read_messages, written_messages, dropped_messages, pending_messages, client_bytes_read, last_ping_time, basic_scopes, attributes, attribute_names].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
