=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class MuxAdaptor
    attr_accessor :muxer_list

    attr_accessor :delete_dash_files_on_exit

    attr_accessor :video_stream_index

    attr_accessor :audio_stream_index

    attr_accessor :preview_overwrite

    attr_accessor :enable_video

    attr_accessor :enable_audio

    attr_accessor :buffer_queue

    attr_accessor :stop_request_exist

    attr_accessor :broadcast_stream

    attr_accessor :object_detection_enabled

    attr_accessor :is_health_check_started_map

    attr_accessor :web_rtc_enabled

    attr_accessor :storage_client

    attr_accessor :data_store

    attr_accessor :stream_id

    attr_accessor :start_time

    attr_accessor :encoder_settings_list

    attr_accessor :preview_create_period

    attr_accessor :broadcast

    attr_accessor :app_settings

    attr_accessor :preview_height

    attr_accessor :last_frame_timestamp

    attr_accessor :buffer_time_ms

    attr_accessor :packet_time_list

    attr_accessor :vertx

    attr_accessor :buffering

    attr_accessor :avc

    attr_accessor :data_channel_web_hook_url

    attr_accessor :dash_muxer

    attr_accessor :video_codec_parameters

    attr_accessor :audio_codec_parameters

    attr_accessor :endpoint_status_update_map

    attr_accessor :video_time_base

    attr_accessor :audio_time_base

    attr_accessor :file_name

    attr_accessor :stream_handler

    attr_accessor :absolute_time_ms

    attr_accessor :input_queue_size

    attr_accessor :appending

    attr_accessor :file_consumer

    attr_accessor :stream_source

    attr_accessor :recording

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'muxer_list' => :'muxerList',
        :'delete_dash_files_on_exit' => :'deleteDASHFilesOnExit',
        :'video_stream_index' => :'videoStreamIndex',
        :'audio_stream_index' => :'audioStreamIndex',
        :'preview_overwrite' => :'previewOverwrite',
        :'enable_video' => :'enableVideo',
        :'enable_audio' => :'enableAudio',
        :'buffer_queue' => :'bufferQueue',
        :'stop_request_exist' => :'stopRequestExist',
        :'broadcast_stream' => :'broadcastStream',
        :'object_detection_enabled' => :'objectDetectionEnabled',
        :'is_health_check_started_map' => :'isHealthCheckStartedMap',
        :'web_rtc_enabled' => :'webRTCEnabled',
        :'storage_client' => :'storageClient',
        :'data_store' => :'dataStore',
        :'stream_id' => :'streamId',
        :'start_time' => :'startTime',
        :'encoder_settings_list' => :'encoderSettingsList',
        :'preview_create_period' => :'previewCreatePeriod',
        :'broadcast' => :'broadcast',
        :'app_settings' => :'appSettings',
        :'preview_height' => :'previewHeight',
        :'last_frame_timestamp' => :'lastFrameTimestamp',
        :'buffer_time_ms' => :'bufferTimeMs',
        :'packet_time_list' => :'packetTimeList',
        :'vertx' => :'vertx',
        :'buffering' => :'buffering',
        :'avc' => :'avc',
        :'data_channel_web_hook_url' => :'dataChannelWebHookURL',
        :'dash_muxer' => :'dashMuxer',
        :'video_codec_parameters' => :'videoCodecParameters',
        :'audio_codec_parameters' => :'audioCodecParameters',
        :'endpoint_status_update_map' => :'endpointStatusUpdateMap',
        :'video_time_base' => :'videoTimeBase',
        :'audio_time_base' => :'audioTimeBase',
        :'file_name' => :'fileName',
        :'stream_handler' => :'streamHandler',
        :'absolute_time_ms' => :'absoluteTimeMs',
        :'input_queue_size' => :'inputQueueSize',
        :'appending' => :'appending',
        :'file_consumer' => :'fileConsumer',
        :'stream_source' => :'streamSource',
        :'recording' => :'recording'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'muxer_list' => :'Array<Muxer>',
        :'delete_dash_files_on_exit' => :'BOOLEAN',
        :'video_stream_index' => :'Integer',
        :'audio_stream_index' => :'Integer',
        :'preview_overwrite' => :'BOOLEAN',
        :'enable_video' => :'BOOLEAN',
        :'enable_audio' => :'BOOLEAN',
        :'buffer_queue' => :'Array<IStreamPacket>',
        :'stop_request_exist' => :'BOOLEAN',
        :'broadcast_stream' => :'ClientBroadcastStream',
        :'object_detection_enabled' => :'BOOLEAN',
        :'is_health_check_started_map' => :'Hash<String, BOOLEAN>',
        :'web_rtc_enabled' => :'BOOLEAN',
        :'storage_client' => :'StorageClient',
        :'data_store' => :'DataStore',
        :'stream_id' => :'String',
        :'start_time' => :'Integer',
        :'encoder_settings_list' => :'Array<EncoderSettings>',
        :'preview_create_period' => :'Integer',
        :'broadcast' => :'Broadcast',
        :'app_settings' => :'AppSettings',
        :'preview_height' => :'Integer',
        :'last_frame_timestamp' => :'Integer',
        :'buffer_time_ms' => :'Integer',
        :'packet_time_list' => :'Array<PacketTime>',
        :'vertx' => :'Vertx',
        :'buffering' => :'BOOLEAN',
        :'avc' => :'BOOLEAN',
        :'data_channel_web_hook_url' => :'String',
        :'dash_muxer' => :'Muxer',
        :'video_codec_parameters' => :'AVCodecParameters',
        :'audio_codec_parameters' => :'AVCodecParameters',
        :'endpoint_status_update_map' => :'Hash<String, String>',
        :'video_time_base' => :'AVRational',
        :'audio_time_base' => :'AVRational',
        :'file_name' => :'String',
        :'stream_handler' => :'IAntMediaStreamHandler',
        :'absolute_time_ms' => :'Integer',
        :'input_queue_size' => :'Integer',
        :'appending' => :'BOOLEAN',
        :'file_consumer' => :'FileConsumer',
        :'stream_source' => :'BOOLEAN',
        :'recording' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'muxerList')
        if (value = attributes[:'muxerList']).is_a?(Array)
          self.muxer_list = value
        end
      end

      if attributes.has_key?(:'deleteDASHFilesOnExit')
        self.delete_dash_files_on_exit = attributes[:'deleteDASHFilesOnExit']
      end

      if attributes.has_key?(:'videoStreamIndex')
        self.video_stream_index = attributes[:'videoStreamIndex']
      end

      if attributes.has_key?(:'audioStreamIndex')
        self.audio_stream_index = attributes[:'audioStreamIndex']
      end

      if attributes.has_key?(:'previewOverwrite')
        self.preview_overwrite = attributes[:'previewOverwrite']
      end

      if attributes.has_key?(:'enableVideo')
        self.enable_video = attributes[:'enableVideo']
      end

      if attributes.has_key?(:'enableAudio')
        self.enable_audio = attributes[:'enableAudio']
      end

      if attributes.has_key?(:'bufferQueue')
        if (value = attributes[:'bufferQueue']).is_a?(Array)
          self.buffer_queue = value
        end
      end

      if attributes.has_key?(:'stopRequestExist')
        self.stop_request_exist = attributes[:'stopRequestExist']
      end

      if attributes.has_key?(:'broadcastStream')
        self.broadcast_stream = attributes[:'broadcastStream']
      end

      if attributes.has_key?(:'objectDetectionEnabled')
        self.object_detection_enabled = attributes[:'objectDetectionEnabled']
      end

      if attributes.has_key?(:'isHealthCheckStartedMap')
        if (value = attributes[:'isHealthCheckStartedMap']).is_a?(Hash)
          self.is_health_check_started_map = value
        end
      end

      if attributes.has_key?(:'webRTCEnabled')
        self.web_rtc_enabled = attributes[:'webRTCEnabled']
      end

      if attributes.has_key?(:'storageClient')
        self.storage_client = attributes[:'storageClient']
      end

      if attributes.has_key?(:'dataStore')
        self.data_store = attributes[:'dataStore']
      end

      if attributes.has_key?(:'streamId')
        self.stream_id = attributes[:'streamId']
      end

      if attributes.has_key?(:'startTime')
        self.start_time = attributes[:'startTime']
      end

      if attributes.has_key?(:'encoderSettingsList')
        if (value = attributes[:'encoderSettingsList']).is_a?(Array)
          self.encoder_settings_list = value
        end
      end

      if attributes.has_key?(:'previewCreatePeriod')
        self.preview_create_period = attributes[:'previewCreatePeriod']
      end

      if attributes.has_key?(:'broadcast')
        self.broadcast = attributes[:'broadcast']
      end

      if attributes.has_key?(:'appSettings')
        self.app_settings = attributes[:'appSettings']
      end

      if attributes.has_key?(:'previewHeight')
        self.preview_height = attributes[:'previewHeight']
      end

      if attributes.has_key?(:'lastFrameTimestamp')
        self.last_frame_timestamp = attributes[:'lastFrameTimestamp']
      end

      if attributes.has_key?(:'bufferTimeMs')
        self.buffer_time_ms = attributes[:'bufferTimeMs']
      end

      if attributes.has_key?(:'packetTimeList')
        if (value = attributes[:'packetTimeList']).is_a?(Array)
          self.packet_time_list = value
        end
      end

      if attributes.has_key?(:'vertx')
        self.vertx = attributes[:'vertx']
      end

      if attributes.has_key?(:'buffering')
        self.buffering = attributes[:'buffering']
      end

      if attributes.has_key?(:'avc')
        self.avc = attributes[:'avc']
      end

      if attributes.has_key?(:'dataChannelWebHookURL')
        self.data_channel_web_hook_url = attributes[:'dataChannelWebHookURL']
      end

      if attributes.has_key?(:'dashMuxer')
        self.dash_muxer = attributes[:'dashMuxer']
      end

      if attributes.has_key?(:'videoCodecParameters')
        self.video_codec_parameters = attributes[:'videoCodecParameters']
      end

      if attributes.has_key?(:'audioCodecParameters')
        self.audio_codec_parameters = attributes[:'audioCodecParameters']
      end

      if attributes.has_key?(:'endpointStatusUpdateMap')
        if (value = attributes[:'endpointStatusUpdateMap']).is_a?(Hash)
          self.endpoint_status_update_map = value
        end
      end

      if attributes.has_key?(:'videoTimeBase')
        self.video_time_base = attributes[:'videoTimeBase']
      end

      if attributes.has_key?(:'audioTimeBase')
        self.audio_time_base = attributes[:'audioTimeBase']
      end

      if attributes.has_key?(:'fileName')
        self.file_name = attributes[:'fileName']
      end

      if attributes.has_key?(:'streamHandler')
        self.stream_handler = attributes[:'streamHandler']
      end

      if attributes.has_key?(:'absoluteTimeMs')
        self.absolute_time_ms = attributes[:'absoluteTimeMs']
      end

      if attributes.has_key?(:'inputQueueSize')
        self.input_queue_size = attributes[:'inputQueueSize']
      end

      if attributes.has_key?(:'appending')
        self.appending = attributes[:'appending']
      end

      if attributes.has_key?(:'fileConsumer')
        self.file_consumer = attributes[:'fileConsumer']
      end

      if attributes.has_key?(:'streamSource')
        self.stream_source = attributes[:'streamSource']
      end

      if attributes.has_key?(:'recording')
        self.recording = attributes[:'recording']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          muxer_list == o.muxer_list &&
          delete_dash_files_on_exit == o.delete_dash_files_on_exit &&
          video_stream_index == o.video_stream_index &&
          audio_stream_index == o.audio_stream_index &&
          preview_overwrite == o.preview_overwrite &&
          enable_video == o.enable_video &&
          enable_audio == o.enable_audio &&
          buffer_queue == o.buffer_queue &&
          stop_request_exist == o.stop_request_exist &&
          broadcast_stream == o.broadcast_stream &&
          object_detection_enabled == o.object_detection_enabled &&
          is_health_check_started_map == o.is_health_check_started_map &&
          web_rtc_enabled == o.web_rtc_enabled &&
          storage_client == o.storage_client &&
          data_store == o.data_store &&
          stream_id == o.stream_id &&
          start_time == o.start_time &&
          encoder_settings_list == o.encoder_settings_list &&
          preview_create_period == o.preview_create_period &&
          broadcast == o.broadcast &&
          app_settings == o.app_settings &&
          preview_height == o.preview_height &&
          last_frame_timestamp == o.last_frame_timestamp &&
          buffer_time_ms == o.buffer_time_ms &&
          packet_time_list == o.packet_time_list &&
          vertx == o.vertx &&
          buffering == o.buffering &&
          avc == o.avc &&
          data_channel_web_hook_url == o.data_channel_web_hook_url &&
          dash_muxer == o.dash_muxer &&
          video_codec_parameters == o.video_codec_parameters &&
          audio_codec_parameters == o.audio_codec_parameters &&
          endpoint_status_update_map == o.endpoint_status_update_map &&
          video_time_base == o.video_time_base &&
          audio_time_base == o.audio_time_base &&
          file_name == o.file_name &&
          stream_handler == o.stream_handler &&
          absolute_time_ms == o.absolute_time_ms &&
          input_queue_size == o.input_queue_size &&
          appending == o.appending &&
          file_consumer == o.file_consumer &&
          stream_source == o.stream_source &&
          recording == o.recording
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [muxer_list, delete_dash_files_on_exit, video_stream_index, audio_stream_index, preview_overwrite, enable_video, enable_audio, buffer_queue, stop_request_exist, broadcast_stream, object_detection_enabled, is_health_check_started_map, web_rtc_enabled, storage_client, data_store, stream_id, start_time, encoder_settings_list, preview_create_period, broadcast, app_settings, preview_height, last_frame_timestamp, buffer_time_ms, packet_time_list, vertx, buffering, avc, data_channel_web_hook_url, dash_muxer, video_codec_parameters, audio_codec_parameters, endpoint_status_update_map, video_time_base, audio_time_base, file_name, stream_handler, absolute_time_ms, input_queue_size, appending, file_consumer, stream_source, recording].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
