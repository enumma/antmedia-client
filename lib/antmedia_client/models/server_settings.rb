=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class ServerSettings
    attr_accessor :allowed_dashboard_cidr

    attr_accessor :host_address

    attr_accessor :server_name

    attr_accessor :licence_key

    attr_accessor :build_for_market

    attr_accessor :marketplace

    attr_accessor :log_level

    attr_accessor :native_log_level

    attr_accessor :heartbeat_enabled

    attr_accessor :use_global_ip

    attr_accessor :proxy_address

    attr_accessor :node_group

    attr_accessor :cpu_measurement_period_ms

    attr_accessor :cpu_measurement_window_size

    attr_accessor :default_http_port

    attr_accessor :jwt_server_control_enabled

    attr_accessor :jwt_server_secret_key

    attr_accessor :jwks_url

    attr_accessor :origin_server_port

    attr_accessor :srt_port

    attr_accessor :host_address_from_environment

    attr_accessor :web_rtc_log_level

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allowed_dashboard_cidr' => :'allowedDashboardCIDR',
        :'host_address' => :'hostAddress',
        :'server_name' => :'serverName',
        :'licence_key' => :'licenceKey',
        :'build_for_market' => :'buildForMarket',
        :'marketplace' => :'marketplace',
        :'log_level' => :'logLevel',
        :'native_log_level' => :'nativeLogLevel',
        :'heartbeat_enabled' => :'heartbeatEnabled',
        :'use_global_ip' => :'useGlobalIp',
        :'proxy_address' => :'proxyAddress',
        :'node_group' => :'nodeGroup',
        :'cpu_measurement_period_ms' => :'cpuMeasurementPeriodMs',
        :'cpu_measurement_window_size' => :'cpuMeasurementWindowSize',
        :'default_http_port' => :'defaultHttpPort',
        :'jwt_server_control_enabled' => :'jwtServerControlEnabled',
        :'jwt_server_secret_key' => :'jwtServerSecretKey',
        :'jwks_url' => :'jwksURL',
        :'origin_server_port' => :'originServerPort',
        :'srt_port' => :'srtPort',
        :'host_address_from_environment' => :'hostAddressFromEnvironment',
        :'web_rtc_log_level' => :'webRTCLogLevel'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'allowed_dashboard_cidr' => :'String',
        :'host_address' => :'String',
        :'server_name' => :'String',
        :'licence_key' => :'String',
        :'build_for_market' => :'BOOLEAN',
        :'marketplace' => :'String',
        :'log_level' => :'String',
        :'native_log_level' => :'String',
        :'heartbeat_enabled' => :'BOOLEAN',
        :'use_global_ip' => :'BOOLEAN',
        :'proxy_address' => :'String',
        :'node_group' => :'String',
        :'cpu_measurement_period_ms' => :'Integer',
        :'cpu_measurement_window_size' => :'Integer',
        :'default_http_port' => :'Integer',
        :'jwt_server_control_enabled' => :'BOOLEAN',
        :'jwt_server_secret_key' => :'String',
        :'jwks_url' => :'String',
        :'origin_server_port' => :'Integer',
        :'srt_port' => :'Integer',
        :'host_address_from_environment' => :'String',
        :'web_rtc_log_level' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'allowedDashboardCIDR')
        self.allowed_dashboard_cidr = attributes[:'allowedDashboardCIDR']
      end

      if attributes.has_key?(:'hostAddress')
        self.host_address = attributes[:'hostAddress']
      end

      if attributes.has_key?(:'serverName')
        self.server_name = attributes[:'serverName']
      end

      if attributes.has_key?(:'licenceKey')
        self.licence_key = attributes[:'licenceKey']
      end

      if attributes.has_key?(:'buildForMarket')
        self.build_for_market = attributes[:'buildForMarket']
      end

      if attributes.has_key?(:'marketplace')
        self.marketplace = attributes[:'marketplace']
      end

      if attributes.has_key?(:'logLevel')
        self.log_level = attributes[:'logLevel']
      end

      if attributes.has_key?(:'nativeLogLevel')
        self.native_log_level = attributes[:'nativeLogLevel']
      end

      if attributes.has_key?(:'heartbeatEnabled')
        self.heartbeat_enabled = attributes[:'heartbeatEnabled']
      end

      if attributes.has_key?(:'useGlobalIp')
        self.use_global_ip = attributes[:'useGlobalIp']
      end

      if attributes.has_key?(:'proxyAddress')
        self.proxy_address = attributes[:'proxyAddress']
      end

      if attributes.has_key?(:'nodeGroup')
        self.node_group = attributes[:'nodeGroup']
      end

      if attributes.has_key?(:'cpuMeasurementPeriodMs')
        self.cpu_measurement_period_ms = attributes[:'cpuMeasurementPeriodMs']
      end

      if attributes.has_key?(:'cpuMeasurementWindowSize')
        self.cpu_measurement_window_size = attributes[:'cpuMeasurementWindowSize']
      end

      if attributes.has_key?(:'defaultHttpPort')
        self.default_http_port = attributes[:'defaultHttpPort']
      end

      if attributes.has_key?(:'jwtServerControlEnabled')
        self.jwt_server_control_enabled = attributes[:'jwtServerControlEnabled']
      end

      if attributes.has_key?(:'jwtServerSecretKey')
        self.jwt_server_secret_key = attributes[:'jwtServerSecretKey']
      end

      if attributes.has_key?(:'jwksURL')
        self.jwks_url = attributes[:'jwksURL']
      end

      if attributes.has_key?(:'originServerPort')
        self.origin_server_port = attributes[:'originServerPort']
      end

      if attributes.has_key?(:'srtPort')
        self.srt_port = attributes[:'srtPort']
      end

      if attributes.has_key?(:'hostAddressFromEnvironment')
        self.host_address_from_environment = attributes[:'hostAddressFromEnvironment']
      end

      if attributes.has_key?(:'webRTCLogLevel')
        self.web_rtc_log_level = attributes[:'webRTCLogLevel']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      web_rtc_log_level_validator = EnumAttributeValidator.new('String', ['LS_VERBOSE', 'LS_INFO', 'LS_WARNING', 'LS_ERROR', 'LS_NONE'])
      return false unless web_rtc_log_level_validator.valid?(@web_rtc_log_level)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] web_rtc_log_level Object to be assigned
    def web_rtc_log_level=(web_rtc_log_level)
      validator = EnumAttributeValidator.new('String', ['LS_VERBOSE', 'LS_INFO', 'LS_WARNING', 'LS_ERROR', 'LS_NONE'])
      unless validator.valid?(web_rtc_log_level)
        fail ArgumentError, 'invalid value for "web_rtc_log_level", must be one of #{validator.allowable_values}.'
      end
      @web_rtc_log_level = web_rtc_log_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allowed_dashboard_cidr == o.allowed_dashboard_cidr &&
          host_address == o.host_address &&
          server_name == o.server_name &&
          licence_key == o.licence_key &&
          build_for_market == o.build_for_market &&
          marketplace == o.marketplace &&
          log_level == o.log_level &&
          native_log_level == o.native_log_level &&
          heartbeat_enabled == o.heartbeat_enabled &&
          use_global_ip == o.use_global_ip &&
          proxy_address == o.proxy_address &&
          node_group == o.node_group &&
          cpu_measurement_period_ms == o.cpu_measurement_period_ms &&
          cpu_measurement_window_size == o.cpu_measurement_window_size &&
          default_http_port == o.default_http_port &&
          jwt_server_control_enabled == o.jwt_server_control_enabled &&
          jwt_server_secret_key == o.jwt_server_secret_key &&
          jwks_url == o.jwks_url &&
          origin_server_port == o.origin_server_port &&
          srt_port == o.srt_port &&
          host_address_from_environment == o.host_address_from_environment &&
          web_rtc_log_level == o.web_rtc_log_level
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [allowed_dashboard_cidr, host_address, server_name, licence_key, build_for_market, marketplace, log_level, native_log_level, heartbeat_enabled, use_global_ip, proxy_address, node_group, cpu_measurement_period_ms, cpu_measurement_window_size, default_http_port, jwt_server_control_enabled, jwt_server_secret_key, jwks_url, origin_server_port, srt_port, host_address_from_environment, web_rtc_log_level].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
