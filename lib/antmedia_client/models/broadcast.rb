=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  # The basic broadcast class
  class Broadcast
    # the id of the stream
    attr_accessor :stream_id

    # the status of the stream
    attr_accessor :status

    # The status of the playlist. It's usable if type is playlist
    attr_accessor :play_list_status

    # the type of the stream
    attr_accessor :type

    # the publish type of the stream
    attr_accessor :publish_type

    # the name of the stream
    attr_accessor :name

    # the description of the stream
    attr_accessor :description

    # it is a video filter for the service, this value is controlled by the user, default value is true in the db
    attr_accessor :publish

    # the date when record is created in milliseconds
    attr_accessor :date

    # the planned start date
    attr_accessor :planned_start_date

    # the planned end date
    attr_accessor :planned_end_date

    # the duration of the stream in milliseconds
    attr_accessor :duration

    # the list of endpoints such as Facebook, Twitter or custom RTMP endpoints  
    attr_accessor :end_point_list

    # the list broadcasts of Playlist Items. This list has values when the broadcast type is playlist
    attr_accessor :play_list_item_list

    # the identifier of whether stream is public or not
    attr_accessor :public_stream

    # the identifier of whether stream is 360 or not
    attr_accessor :is360

    # the url that will be notified when stream is published, ended and muxing finished
    attr_accessor :listener_hook_url

    # the category of the stream
    attr_accessor :category

    # the IP Address of the IP Camera or publisher
    attr_accessor :ip_addr

    # the user name of the IP Camera
    attr_accessor :username

    # the password of the IP Camera
    attr_accessor :password

    # the quality of the incoming stream during publishing
    attr_accessor :quality

    # the speed of the incoming stream, for better quality and performance it should be around 1.00
    attr_accessor :speed

    # the stream URL for fetching stream, especially should be defined for IP Cameras or Cloud streams
    attr_accessor :stream_url

    # the origin address server broadcasting
    attr_accessor :origin_adress

    # MP4 muxing whether enabled or not for the stream, 1 means enabled, -1 means disabled, 0 means no settings for the stream
    attr_accessor :mp4_enabled

    # WebM muxing whether enabled or not for the stream, 1 means enabled, -1 means disabled, 0 means no settings for the stream
    attr_accessor :web_m_enabled

    # the expire time in milliseconds For instance if this value is 10000 then broadcast should be started in 10 seconds after it is created.If expire duration is 0, then stream will never expire
    attr_accessor :expire_duration_ms

    # the RTMP URL where to publish live stream to
    attr_accessor :rtmp_url

    # is true, if a broadcast that is not added to data store through rest service or management console It is false by default
    attr_accessor :zombi

    # the number of audio and video packets that is being pending to be encoded in the queue 
    attr_accessor :pending_packet_size

    # the number of HLS viewers of the stream
    attr_accessor :hls_viewer_count

    # the number of DASH viewers of the stream
    attr_accessor :dash_viewer_count

    # the number of WebRTC viewers of the stream
    attr_accessor :web_rtc_viewer_count

    # the number of RTMP viewers of the stream
    attr_accessor :rtmp_viewer_count

    # the publishing start time of the stream
    attr_accessor :start_time

    # the received bytes until now
    attr_accessor :received_bytes

    # the received bytes / duration
    attr_accessor :bitrate

    # User - Agent
    attr_accessor :user_agent

    # latitude of the broadcasting location
    attr_accessor :latitude

    # longitude of the broadcasting location
    attr_accessor :longitude

    # altitude of the broadcasting location
    attr_accessor :altitude

    # If this broadcast is a track of a WebRTC stream. This variable is Id of that stream.
    attr_accessor :main_track_stream_id

    # If this broadcast is main track. This variable hold sub track ids.
    attr_accessor :sub_track_stream_ids

    # Absolute start time in milliseconds - unix timestamp. It's used for measuring the absolute latency
    attr_accessor :absolute_start_time_ms

    # Number of the allowed maximum WebRTC viewers for the broadcast
    attr_accessor :web_rtc_viewer_limit

    # Number of the allowed maximum HLS viewers for the broadcast
    attr_accessor :hls_viewer_limit

    # Number of the allowed maximum DASH viewers for the broadcast
    attr_accessor :dash_viewer_limit

    # Name of the subfolder that will contain stream files
    attr_accessor :sub_folder

    # Current playing index for playlist types
    attr_accessor :current_play_index

    # Meta data filed for the custom usage
    attr_accessor :meta_data

    # the identifier of playlist loop status
    attr_accessor :playlist_loop_enabled

    attr_accessor :update_time

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'stream_id' => :'streamId',
        :'status' => :'status',
        :'play_list_status' => :'playListStatus',
        :'type' => :'type',
        :'publish_type' => :'publishType',
        :'name' => :'name',
        :'description' => :'description',
        :'publish' => :'publish',
        :'date' => :'date',
        :'planned_start_date' => :'plannedStartDate',
        :'planned_end_date' => :'plannedEndDate',
        :'duration' => :'duration',
        :'end_point_list' => :'endPointList',
        :'play_list_item_list' => :'playListItemList',
        :'public_stream' => :'publicStream',
        :'is360' => :'is360',
        :'listener_hook_url' => :'listenerHookURL',
        :'category' => :'category',
        :'ip_addr' => :'ipAddr',
        :'username' => :'username',
        :'password' => :'password',
        :'quality' => :'quality',
        :'speed' => :'speed',
        :'stream_url' => :'streamUrl',
        :'origin_adress' => :'originAdress',
        :'mp4_enabled' => :'mp4Enabled',
        :'web_m_enabled' => :'webMEnabled',
        :'expire_duration_ms' => :'expireDurationMS',
        :'rtmp_url' => :'rtmpURL',
        :'zombi' => :'zombi',
        :'pending_packet_size' => :'pendingPacketSize',
        :'hls_viewer_count' => :'hlsViewerCount',
        :'dash_viewer_count' => :'dashViewerCount',
        :'web_rtc_viewer_count' => :'webRTCViewerCount',
        :'rtmp_viewer_count' => :'rtmpViewerCount',
        :'start_time' => :'startTime',
        :'received_bytes' => :'receivedBytes',
        :'bitrate' => :'bitrate',
        :'user_agent' => :'userAgent',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'altitude' => :'altitude',
        :'main_track_stream_id' => :'mainTrackStreamId',
        :'sub_track_stream_ids' => :'subTrackStreamIds',
        :'absolute_start_time_ms' => :'absoluteStartTimeMs',
        :'web_rtc_viewer_limit' => :'webRTCViewerLimit',
        :'hls_viewer_limit' => :'hlsViewerLimit',
        :'dash_viewer_limit' => :'dashViewerLimit',
        :'sub_folder' => :'subFolder',
        :'current_play_index' => :'currentPlayIndex',
        :'meta_data' => :'metaData',
        :'playlist_loop_enabled' => :'playlistLoopEnabled',
        :'update_time' => :'updateTime'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'stream_id' => :'String',
        :'status' => :'String',
        :'play_list_status' => :'String',
        :'type' => :'String',
        :'publish_type' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'publish' => :'BOOLEAN',
        :'date' => :'Integer',
        :'planned_start_date' => :'Integer',
        :'planned_end_date' => :'Integer',
        :'duration' => :'Integer',
        :'end_point_list' => :'Array<Endpoint>',
        :'play_list_item_list' => :'Array<PlayListItem>',
        :'public_stream' => :'BOOLEAN',
        :'is360' => :'BOOLEAN',
        :'listener_hook_url' => :'String',
        :'category' => :'String',
        :'ip_addr' => :'String',
        :'username' => :'String',
        :'password' => :'String',
        :'quality' => :'String',
        :'speed' => :'Float',
        :'stream_url' => :'String',
        :'origin_adress' => :'String',
        :'mp4_enabled' => :'Integer',
        :'web_m_enabled' => :'Integer',
        :'expire_duration_ms' => :'Integer',
        :'rtmp_url' => :'String',
        :'zombi' => :'BOOLEAN',
        :'pending_packet_size' => :'Integer',
        :'hls_viewer_count' => :'Integer',
        :'dash_viewer_count' => :'Integer',
        :'web_rtc_viewer_count' => :'Integer',
        :'rtmp_viewer_count' => :'Integer',
        :'start_time' => :'Integer',
        :'received_bytes' => :'Integer',
        :'bitrate' => :'Integer',
        :'user_agent' => :'String',
        :'latitude' => :'String',
        :'longitude' => :'String',
        :'altitude' => :'String',
        :'main_track_stream_id' => :'String',
        :'sub_track_stream_ids' => :'Array<String>',
        :'absolute_start_time_ms' => :'Integer',
        :'web_rtc_viewer_limit' => :'Integer',
        :'hls_viewer_limit' => :'Integer',
        :'dash_viewer_limit' => :'Integer',
        :'sub_folder' => :'String',
        :'current_play_index' => :'Integer',
        :'meta_data' => :'String',
        :'playlist_loop_enabled' => :'BOOLEAN',
        :'update_time' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'streamId')
        self.stream_id = attributes[:'streamId']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'playListStatus')
        self.play_list_status = attributes[:'playListStatus']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'publishType')
        self.publish_type = attributes[:'publishType']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'publish')
        self.publish = attributes[:'publish']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'plannedStartDate')
        self.planned_start_date = attributes[:'plannedStartDate']
      end

      if attributes.has_key?(:'plannedEndDate')
        self.planned_end_date = attributes[:'plannedEndDate']
      end

      if attributes.has_key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.has_key?(:'endPointList')
        if (value = attributes[:'endPointList']).is_a?(Array)
          self.end_point_list = value
        end
      end

      if attributes.has_key?(:'playListItemList')
        if (value = attributes[:'playListItemList']).is_a?(Array)
          self.play_list_item_list = value
        end
      end

      if attributes.has_key?(:'publicStream')
        self.public_stream = attributes[:'publicStream']
      end

      if attributes.has_key?(:'is360')
        self.is360 = attributes[:'is360']
      end

      if attributes.has_key?(:'listenerHookURL')
        self.listener_hook_url = attributes[:'listenerHookURL']
      end

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'ipAddr')
        self.ip_addr = attributes[:'ipAddr']
      end

      if attributes.has_key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'quality')
        self.quality = attributes[:'quality']
      end

      if attributes.has_key?(:'speed')
        self.speed = attributes[:'speed']
      end

      if attributes.has_key?(:'streamUrl')
        self.stream_url = attributes[:'streamUrl']
      end

      if attributes.has_key?(:'originAdress')
        self.origin_adress = attributes[:'originAdress']
      end

      if attributes.has_key?(:'mp4Enabled')
        self.mp4_enabled = attributes[:'mp4Enabled']
      end

      if attributes.has_key?(:'webMEnabled')
        self.web_m_enabled = attributes[:'webMEnabled']
      end

      if attributes.has_key?(:'expireDurationMS')
        self.expire_duration_ms = attributes[:'expireDurationMS']
      end

      if attributes.has_key?(:'rtmpURL')
        self.rtmp_url = attributes[:'rtmpURL']
      end

      if attributes.has_key?(:'zombi')
        self.zombi = attributes[:'zombi']
      end

      if attributes.has_key?(:'pendingPacketSize')
        self.pending_packet_size = attributes[:'pendingPacketSize']
      end

      if attributes.has_key?(:'hlsViewerCount')
        self.hls_viewer_count = attributes[:'hlsViewerCount']
      end

      if attributes.has_key?(:'dashViewerCount')
        self.dash_viewer_count = attributes[:'dashViewerCount']
      end

      if attributes.has_key?(:'webRTCViewerCount')
        self.web_rtc_viewer_count = attributes[:'webRTCViewerCount']
      end

      if attributes.has_key?(:'rtmpViewerCount')
        self.rtmp_viewer_count = attributes[:'rtmpViewerCount']
      end

      if attributes.has_key?(:'startTime')
        self.start_time = attributes[:'startTime']
      end

      if attributes.has_key?(:'receivedBytes')
        self.received_bytes = attributes[:'receivedBytes']
      end

      if attributes.has_key?(:'bitrate')
        self.bitrate = attributes[:'bitrate']
      end

      if attributes.has_key?(:'userAgent')
        self.user_agent = attributes[:'userAgent']
      end

      if attributes.has_key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.has_key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.has_key?(:'altitude')
        self.altitude = attributes[:'altitude']
      end

      if attributes.has_key?(:'mainTrackStreamId')
        self.main_track_stream_id = attributes[:'mainTrackStreamId']
      end

      if attributes.has_key?(:'subTrackStreamIds')
        if (value = attributes[:'subTrackStreamIds']).is_a?(Array)
          self.sub_track_stream_ids = value
        end
      end

      if attributes.has_key?(:'absoluteStartTimeMs')
        self.absolute_start_time_ms = attributes[:'absoluteStartTimeMs']
      end

      if attributes.has_key?(:'webRTCViewerLimit')
        self.web_rtc_viewer_limit = attributes[:'webRTCViewerLimit']
      end

      if attributes.has_key?(:'hlsViewerLimit')
        self.hls_viewer_limit = attributes[:'hlsViewerLimit']
      end

      if attributes.has_key?(:'dashViewerLimit')
        self.dash_viewer_limit = attributes[:'dashViewerLimit']
      end

      if attributes.has_key?(:'subFolder')
        self.sub_folder = attributes[:'subFolder']
      end

      if attributes.has_key?(:'currentPlayIndex')
        self.current_play_index = attributes[:'currentPlayIndex']
      end

      if attributes.has_key?(:'metaData')
        self.meta_data = attributes[:'metaData']
      end

      if attributes.has_key?(:'playlistLoopEnabled')
        self.playlist_loop_enabled = attributes[:'playlistLoopEnabled']
      end

      if attributes.has_key?(:'updateTime')
        self.update_time = attributes[:'updateTime']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['finished', 'broadcasting', 'created'])
      return false unless status_validator.valid?(@status)
      play_list_status_validator = EnumAttributeValidator.new('String', ['finished', 'broadcasting', 'created'])
      return false unless play_list_status_validator.valid?(@play_list_status)
      type_validator = EnumAttributeValidator.new('String', ['liveStream', 'ipCamera', 'streamSource', 'VoD', 'playlist'])
      return false unless type_validator.valid?(@type)
      publish_type_validator = EnumAttributeValidator.new('String', ['WebRTC', 'RTMP', 'Pull'])
      return false unless publish_type_validator.valid?(@publish_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['finished', 'broadcasting', 'created'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] play_list_status Object to be assigned
    def play_list_status=(play_list_status)
      validator = EnumAttributeValidator.new('String', ['finished', 'broadcasting', 'created'])
      unless validator.valid?(play_list_status)
        fail ArgumentError, 'invalid value for "play_list_status", must be one of #{validator.allowable_values}.'
      end
      @play_list_status = play_list_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['liveStream', 'ipCamera', 'streamSource', 'VoD', 'playlist'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] publish_type Object to be assigned
    def publish_type=(publish_type)
      validator = EnumAttributeValidator.new('String', ['WebRTC', 'RTMP', 'Pull'])
      unless validator.valid?(publish_type)
        fail ArgumentError, 'invalid value for "publish_type", must be one of #{validator.allowable_values}.'
      end
      @publish_type = publish_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          stream_id == o.stream_id &&
          status == o.status &&
          play_list_status == o.play_list_status &&
          type == o.type &&
          publish_type == o.publish_type &&
          name == o.name &&
          description == o.description &&
          publish == o.publish &&
          date == o.date &&
          planned_start_date == o.planned_start_date &&
          planned_end_date == o.planned_end_date &&
          duration == o.duration &&
          end_point_list == o.end_point_list &&
          play_list_item_list == o.play_list_item_list &&
          public_stream == o.public_stream &&
          is360 == o.is360 &&
          listener_hook_url == o.listener_hook_url &&
          category == o.category &&
          ip_addr == o.ip_addr &&
          username == o.username &&
          password == o.password &&
          quality == o.quality &&
          speed == o.speed &&
          stream_url == o.stream_url &&
          origin_adress == o.origin_adress &&
          mp4_enabled == o.mp4_enabled &&
          web_m_enabled == o.web_m_enabled &&
          expire_duration_ms == o.expire_duration_ms &&
          rtmp_url == o.rtmp_url &&
          zombi == o.zombi &&
          pending_packet_size == o.pending_packet_size &&
          hls_viewer_count == o.hls_viewer_count &&
          dash_viewer_count == o.dash_viewer_count &&
          web_rtc_viewer_count == o.web_rtc_viewer_count &&
          rtmp_viewer_count == o.rtmp_viewer_count &&
          start_time == o.start_time &&
          received_bytes == o.received_bytes &&
          bitrate == o.bitrate &&
          user_agent == o.user_agent &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          altitude == o.altitude &&
          main_track_stream_id == o.main_track_stream_id &&
          sub_track_stream_ids == o.sub_track_stream_ids &&
          absolute_start_time_ms == o.absolute_start_time_ms &&
          web_rtc_viewer_limit == o.web_rtc_viewer_limit &&
          hls_viewer_limit == o.hls_viewer_limit &&
          dash_viewer_limit == o.dash_viewer_limit &&
          sub_folder == o.sub_folder &&
          current_play_index == o.current_play_index &&
          meta_data == o.meta_data &&
          playlist_loop_enabled == o.playlist_loop_enabled &&
          update_time == o.update_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [stream_id, status, play_list_status, type, publish_type, name, description, publish, date, planned_start_date, planned_end_date, duration, end_point_list, play_list_item_list, public_stream, is360, listener_hook_url, category, ip_addr, username, password, quality, speed, stream_url, origin_adress, mp4_enabled, web_m_enabled, expire_duration_ms, rtmp_url, zombi, pending_packet_size, hls_viewer_count, dash_viewer_count, web_rtc_viewer_count, rtmp_viewer_count, start_time, received_bytes, bitrate, user_agent, latitude, longitude, altitude, main_track_stream_id, sub_track_stream_ids, absolute_start_time_ms, web_rtc_viewer_limit, hls_viewer_limit, dash_viewer_limit, sub_folder, current_play_index, meta_data, playlist_loop_enabled, update_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
