=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class ClientBroadcastStream
    attr_accessor :state

    attr_accessor :name

    attr_accessor :codec_info

    attr_accessor :meta_data

    attr_accessor :scope

    attr_accessor :creation_time

    attr_accessor :absolute_start_time_ms

    attr_accessor :stream_id

    attr_accessor :broadcast_stream_publish_name

    attr_accessor :client_buffer_duration

    attr_accessor :automatic_recording

    attr_accessor :bytes_received

    attr_accessor :published_name

    attr_accessor :parameters

    attr_accessor :provider

    attr_accessor :statistics

    attr_accessor :recording

    attr_accessor :save_filename

    attr_accessor :stream_listeners

    attr_accessor :active_subscribers

    attr_accessor :current_timestamp

    attr_accessor :max_subscribers

    attr_accessor :total_subscribers

    attr_accessor :connection

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'state' => :'state',
        :'name' => :'name',
        :'codec_info' => :'codecInfo',
        :'meta_data' => :'metaData',
        :'scope' => :'scope',
        :'creation_time' => :'creationTime',
        :'absolute_start_time_ms' => :'absoluteStartTimeMs',
        :'stream_id' => :'streamId',
        :'broadcast_stream_publish_name' => :'broadcastStreamPublishName',
        :'client_buffer_duration' => :'clientBufferDuration',
        :'automatic_recording' => :'automaticRecording',
        :'bytes_received' => :'bytesReceived',
        :'published_name' => :'publishedName',
        :'parameters' => :'parameters',
        :'provider' => :'provider',
        :'statistics' => :'statistics',
        :'recording' => :'recording',
        :'save_filename' => :'saveFilename',
        :'stream_listeners' => :'streamListeners',
        :'active_subscribers' => :'activeSubscribers',
        :'current_timestamp' => :'currentTimestamp',
        :'max_subscribers' => :'maxSubscribers',
        :'total_subscribers' => :'totalSubscribers',
        :'connection' => :'connection'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'state' => :'String',
        :'name' => :'String',
        :'codec_info' => :'IStreamCodecInfo',
        :'meta_data' => :'Notify',
        :'scope' => :'IScope',
        :'creation_time' => :'Integer',
        :'absolute_start_time_ms' => :'Integer',
        :'stream_id' => :'Number',
        :'broadcast_stream_publish_name' => :'String',
        :'client_buffer_duration' => :'Integer',
        :'automatic_recording' => :'BOOLEAN',
        :'bytes_received' => :'Integer',
        :'published_name' => :'String',
        :'parameters' => :'Hash<String, String>',
        :'provider' => :'IProvider',
        :'statistics' => :'IClientBroadcastStreamStatistics',
        :'recording' => :'BOOLEAN',
        :'save_filename' => :'String',
        :'stream_listeners' => :'Array<IStreamListener>',
        :'active_subscribers' => :'Integer',
        :'current_timestamp' => :'Integer',
        :'max_subscribers' => :'Integer',
        :'total_subscribers' => :'Integer',
        :'connection' => :'IStreamCapableConnection'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'codecInfo')
        self.codec_info = attributes[:'codecInfo']
      end

      if attributes.has_key?(:'metaData')
        self.meta_data = attributes[:'metaData']
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'creationTime')
        self.creation_time = attributes[:'creationTime']
      end

      if attributes.has_key?(:'absoluteStartTimeMs')
        self.absolute_start_time_ms = attributes[:'absoluteStartTimeMs']
      end

      if attributes.has_key?(:'streamId')
        self.stream_id = attributes[:'streamId']
      end

      if attributes.has_key?(:'broadcastStreamPublishName')
        self.broadcast_stream_publish_name = attributes[:'broadcastStreamPublishName']
      end

      if attributes.has_key?(:'clientBufferDuration')
        self.client_buffer_duration = attributes[:'clientBufferDuration']
      end

      if attributes.has_key?(:'automaticRecording')
        self.automatic_recording = attributes[:'automaticRecording']
      end

      if attributes.has_key?(:'bytesReceived')
        self.bytes_received = attributes[:'bytesReceived']
      end

      if attributes.has_key?(:'publishedName')
        self.published_name = attributes[:'publishedName']
      end

      if attributes.has_key?(:'parameters')
        if (value = attributes[:'parameters']).is_a?(Hash)
          self.parameters = value
        end
      end

      if attributes.has_key?(:'provider')
        self.provider = attributes[:'provider']
      end

      if attributes.has_key?(:'statistics')
        self.statistics = attributes[:'statistics']
      end

      if attributes.has_key?(:'recording')
        self.recording = attributes[:'recording']
      end

      if attributes.has_key?(:'saveFilename')
        self.save_filename = attributes[:'saveFilename']
      end

      if attributes.has_key?(:'streamListeners')
        if (value = attributes[:'streamListeners']).is_a?(Array)
          self.stream_listeners = value
        end
      end

      if attributes.has_key?(:'activeSubscribers')
        self.active_subscribers = attributes[:'activeSubscribers']
      end

      if attributes.has_key?(:'currentTimestamp')
        self.current_timestamp = attributes[:'currentTimestamp']
      end

      if attributes.has_key?(:'maxSubscribers')
        self.max_subscribers = attributes[:'maxSubscribers']
      end

      if attributes.has_key?(:'totalSubscribers')
        self.total_subscribers = attributes[:'totalSubscribers']
      end

      if attributes.has_key?(:'connection')
        self.connection = attributes[:'connection']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('String', ['INIT', 'UNINIT', 'OPEN', 'CLOSED', 'STARTED', 'STOPPED', 'PLAYING', 'PAUSED', 'RESUMED', 'END', 'SEEK'])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ['INIT', 'UNINIT', 'OPEN', 'CLOSED', 'STARTED', 'STOPPED', 'PLAYING', 'PAUSED', 'RESUMED', 'END', 'SEEK'])
      unless validator.valid?(state)
        fail ArgumentError, 'invalid value for "state", must be one of #{validator.allowable_values}.'
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          state == o.state &&
          name == o.name &&
          codec_info == o.codec_info &&
          meta_data == o.meta_data &&
          scope == o.scope &&
          creation_time == o.creation_time &&
          absolute_start_time_ms == o.absolute_start_time_ms &&
          stream_id == o.stream_id &&
          broadcast_stream_publish_name == o.broadcast_stream_publish_name &&
          client_buffer_duration == o.client_buffer_duration &&
          automatic_recording == o.automatic_recording &&
          bytes_received == o.bytes_received &&
          published_name == o.published_name &&
          parameters == o.parameters &&
          provider == o.provider &&
          statistics == o.statistics &&
          recording == o.recording &&
          save_filename == o.save_filename &&
          stream_listeners == o.stream_listeners &&
          active_subscribers == o.active_subscribers &&
          current_timestamp == o.current_timestamp &&
          max_subscribers == o.max_subscribers &&
          total_subscribers == o.total_subscribers &&
          connection == o.connection
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [state, name, codec_info, meta_data, scope, creation_time, absolute_start_time_ms, stream_id, broadcast_stream_publish_name, client_buffer_duration, automatic_recording, bytes_received, published_name, parameters, provider, statistics, recording, save_filename, stream_listeners, active_subscribers, current_timestamp, max_subscribers, total_subscribers, connection].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
