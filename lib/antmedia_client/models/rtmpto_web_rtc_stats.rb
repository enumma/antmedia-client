=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class RTMPToWebRTCStats
    attr_accessor :stream_id

    attr_accessor :encoder_count

    attr_accessor :total_video_ingest_time

    attr_accessor :total_ingested_video_packet_count

    attr_accessor :total_video_decode_time

    attr_accessor :total_decoded_video_frame_count

    attr_accessor :total_video_encode_queue_time

    attr_accessor :total_video_encode_time

    attr_accessor :total_encoded_video_packet_count

    attr_accessor :total_video_delivery_time

    attr_accessor :total_delivered_video_packet_count

    attr_accessor :absolute_total_ingest_time

    attr_accessor :absolute_time_ms

    attr_accessor :absoute_total_latency_until_rtp_packetizing_time_ms

    attr_accessor :frame_id

    attr_accessor :capture_time_ms

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'stream_id' => :'streamId',
        :'encoder_count' => :'encoderCount',
        :'total_video_ingest_time' => :'totalVideoIngestTime',
        :'total_ingested_video_packet_count' => :'totalIngestedVideoPacketCount',
        :'total_video_decode_time' => :'totalVideoDecodeTime',
        :'total_decoded_video_frame_count' => :'totalDecodedVideoFrameCount',
        :'total_video_encode_queue_time' => :'totalVideoEncodeQueueTime',
        :'total_video_encode_time' => :'totalVideoEncodeTime',
        :'total_encoded_video_packet_count' => :'totalEncodedVideoPacketCount',
        :'total_video_delivery_time' => :'totalVideoDeliveryTime',
        :'total_delivered_video_packet_count' => :'totalDeliveredVideoPacketCount',
        :'absolute_total_ingest_time' => :'absoluteTotalIngestTime',
        :'absolute_time_ms' => :'absoluteTimeMs',
        :'absoute_total_latency_until_rtp_packetizing_time_ms' => :'absouteTotalLatencyUntilRTPPacketizingTimeMs',
        :'frame_id' => :'frameId',
        :'capture_time_ms' => :'captureTimeMs'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'stream_id' => :'String',
        :'encoder_count' => :'Integer',
        :'total_video_ingest_time' => :'Integer',
        :'total_ingested_video_packet_count' => :'Integer',
        :'total_video_decode_time' => :'Integer',
        :'total_decoded_video_frame_count' => :'Integer',
        :'total_video_encode_queue_time' => :'Integer',
        :'total_video_encode_time' => :'Integer',
        :'total_encoded_video_packet_count' => :'Integer',
        :'total_video_delivery_time' => :'Integer',
        :'total_delivered_video_packet_count' => :'Integer',
        :'absolute_total_ingest_time' => :'Integer',
        :'absolute_time_ms' => :'Integer',
        :'absoute_total_latency_until_rtp_packetizing_time_ms' => :'Integer',
        :'frame_id' => :'Integer',
        :'capture_time_ms' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'streamId')
        self.stream_id = attributes[:'streamId']
      end

      if attributes.has_key?(:'encoderCount')
        self.encoder_count = attributes[:'encoderCount']
      end

      if attributes.has_key?(:'totalVideoIngestTime')
        self.total_video_ingest_time = attributes[:'totalVideoIngestTime']
      end

      if attributes.has_key?(:'totalIngestedVideoPacketCount')
        self.total_ingested_video_packet_count = attributes[:'totalIngestedVideoPacketCount']
      end

      if attributes.has_key?(:'totalVideoDecodeTime')
        self.total_video_decode_time = attributes[:'totalVideoDecodeTime']
      end

      if attributes.has_key?(:'totalDecodedVideoFrameCount')
        self.total_decoded_video_frame_count = attributes[:'totalDecodedVideoFrameCount']
      end

      if attributes.has_key?(:'totalVideoEncodeQueueTime')
        self.total_video_encode_queue_time = attributes[:'totalVideoEncodeQueueTime']
      end

      if attributes.has_key?(:'totalVideoEncodeTime')
        self.total_video_encode_time = attributes[:'totalVideoEncodeTime']
      end

      if attributes.has_key?(:'totalEncodedVideoPacketCount')
        self.total_encoded_video_packet_count = attributes[:'totalEncodedVideoPacketCount']
      end

      if attributes.has_key?(:'totalVideoDeliveryTime')
        self.total_video_delivery_time = attributes[:'totalVideoDeliveryTime']
      end

      if attributes.has_key?(:'totalDeliveredVideoPacketCount')
        self.total_delivered_video_packet_count = attributes[:'totalDeliveredVideoPacketCount']
      end

      if attributes.has_key?(:'absoluteTotalIngestTime')
        self.absolute_total_ingest_time = attributes[:'absoluteTotalIngestTime']
      end

      if attributes.has_key?(:'absoluteTimeMs')
        self.absolute_time_ms = attributes[:'absoluteTimeMs']
      end

      if attributes.has_key?(:'absouteTotalLatencyUntilRTPPacketizingTimeMs')
        self.absoute_total_latency_until_rtp_packetizing_time_ms = attributes[:'absouteTotalLatencyUntilRTPPacketizingTimeMs']
      end

      if attributes.has_key?(:'frameId')
        self.frame_id = attributes[:'frameId']
      end

      if attributes.has_key?(:'captureTimeMs')
        self.capture_time_ms = attributes[:'captureTimeMs']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          stream_id == o.stream_id &&
          encoder_count == o.encoder_count &&
          total_video_ingest_time == o.total_video_ingest_time &&
          total_ingested_video_packet_count == o.total_ingested_video_packet_count &&
          total_video_decode_time == o.total_video_decode_time &&
          total_decoded_video_frame_count == o.total_decoded_video_frame_count &&
          total_video_encode_queue_time == o.total_video_encode_queue_time &&
          total_video_encode_time == o.total_video_encode_time &&
          total_encoded_video_packet_count == o.total_encoded_video_packet_count &&
          total_video_delivery_time == o.total_video_delivery_time &&
          total_delivered_video_packet_count == o.total_delivered_video_packet_count &&
          absolute_total_ingest_time == o.absolute_total_ingest_time &&
          absolute_time_ms == o.absolute_time_ms &&
          absoute_total_latency_until_rtp_packetizing_time_ms == o.absoute_total_latency_until_rtp_packetizing_time_ms &&
          frame_id == o.frame_id &&
          capture_time_ms == o.capture_time_ms
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [stream_id, encoder_count, total_video_ingest_time, total_ingested_video_packet_count, total_video_decode_time, total_decoded_video_frame_count, total_video_encode_queue_time, total_video_encode_time, total_encoded_video_packet_count, total_video_delivery_time, total_delivered_video_packet_count, absolute_total_ingest_time, absolute_time_ms, absoute_total_latency_until_rtp_packetizing_time_ms, frame_id, capture_time_ms].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
