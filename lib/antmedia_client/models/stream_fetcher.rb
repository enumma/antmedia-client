=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class StreamFetcher
    attr_accessor :thread

    attr_accessor :exception_in_thread

    attr_accessor :thread_active

    attr_accessor :camera_error

    attr_accessor :scope

    attr_accessor :mux_adaptor

    attr_accessor :restart_stream

    attr_accessor :stop_request_received

    attr_accessor :buffer_time

    attr_accessor :data_store

    attr_accessor :stream_fetcher_listener

    attr_accessor :stream_url

    attr_accessor :stream_id

    attr_accessor :instance

    attr_accessor :stream_alive

    attr_accessor :avpacket

    attr_accessor :stopped

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'thread' => :'thread',
        :'exception_in_thread' => :'exceptionInThread',
        :'thread_active' => :'threadActive',
        :'camera_error' => :'cameraError',
        :'scope' => :'scope',
        :'mux_adaptor' => :'muxAdaptor',
        :'restart_stream' => :'restartStream',
        :'stop_request_received' => :'stopRequestReceived',
        :'buffer_time' => :'bufferTime',
        :'data_store' => :'dataStore',
        :'stream_fetcher_listener' => :'streamFetcherListener',
        :'stream_url' => :'streamUrl',
        :'stream_id' => :'streamId',
        :'instance' => :'instance',
        :'stream_alive' => :'streamAlive',
        :'avpacket' => :'avpacket',
        :'stopped' => :'stopped'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'thread' => :'WorkerThread',
        :'exception_in_thread' => :'BOOLEAN',
        :'thread_active' => :'BOOLEAN',
        :'camera_error' => :'Result',
        :'scope' => :'IScope',
        :'mux_adaptor' => :'MuxAdaptor',
        :'restart_stream' => :'BOOLEAN',
        :'stop_request_received' => :'BOOLEAN',
        :'buffer_time' => :'Integer',
        :'data_store' => :'DataStore',
        :'stream_fetcher_listener' => :'IStreamFetcherListener',
        :'stream_url' => :'String',
        :'stream_id' => :'String',
        :'instance' => :'AntMediaApplicationAdapter',
        :'stream_alive' => :'BOOLEAN',
        :'avpacket' => :'AVPacket',
        :'stopped' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'thread')
        self.thread = attributes[:'thread']
      end

      if attributes.has_key?(:'exceptionInThread')
        self.exception_in_thread = attributes[:'exceptionInThread']
      end

      if attributes.has_key?(:'threadActive')
        self.thread_active = attributes[:'threadActive']
      end

      if attributes.has_key?(:'cameraError')
        self.camera_error = attributes[:'cameraError']
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'muxAdaptor')
        self.mux_adaptor = attributes[:'muxAdaptor']
      end

      if attributes.has_key?(:'restartStream')
        self.restart_stream = attributes[:'restartStream']
      end

      if attributes.has_key?(:'stopRequestReceived')
        self.stop_request_received = attributes[:'stopRequestReceived']
      end

      if attributes.has_key?(:'bufferTime')
        self.buffer_time = attributes[:'bufferTime']
      end

      if attributes.has_key?(:'dataStore')
        self.data_store = attributes[:'dataStore']
      end

      if attributes.has_key?(:'streamFetcherListener')
        self.stream_fetcher_listener = attributes[:'streamFetcherListener']
      end

      if attributes.has_key?(:'streamUrl')
        self.stream_url = attributes[:'streamUrl']
      end

      if attributes.has_key?(:'streamId')
        self.stream_id = attributes[:'streamId']
      end

      if attributes.has_key?(:'instance')
        self.instance = attributes[:'instance']
      end

      if attributes.has_key?(:'streamAlive')
        self.stream_alive = attributes[:'streamAlive']
      end

      if attributes.has_key?(:'avpacket')
        self.avpacket = attributes[:'avpacket']
      end

      if attributes.has_key?(:'stopped')
        self.stopped = attributes[:'stopped']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          thread == o.thread &&
          exception_in_thread == o.exception_in_thread &&
          thread_active == o.thread_active &&
          camera_error == o.camera_error &&
          scope == o.scope &&
          mux_adaptor == o.mux_adaptor &&
          restart_stream == o.restart_stream &&
          stop_request_received == o.stop_request_received &&
          buffer_time == o.buffer_time &&
          data_store == o.data_store &&
          stream_fetcher_listener == o.stream_fetcher_listener &&
          stream_url == o.stream_url &&
          stream_id == o.stream_id &&
          instance == o.instance &&
          stream_alive == o.stream_alive &&
          avpacket == o.avpacket &&
          stopped == o.stopped
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [thread, exception_in_thread, thread_active, camera_error, scope, mux_adaptor, restart_stream, stop_request_received, buffer_time, data_store, stream_fetcher_listener, stream_url, stream_id, instance, stream_alive, avpacket, stopped].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
