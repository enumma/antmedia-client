=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class ServletContext
    attr_accessor :class_loader

    attr_accessor :major_version

    attr_accessor :minor_version

    attr_accessor :attribute_names

    attr_accessor :context_path

    attr_accessor :effective_major_version

    attr_accessor :effective_minor_version

    attr_accessor :servlets

    attr_accessor :servlet_names

    attr_accessor :server_info

    attr_accessor :init_parameter_names

    attr_accessor :servlet_context_name

    attr_accessor :servlet_registrations

    attr_accessor :filter_registrations

    attr_accessor :session_cookie_config

    attr_accessor :default_session_tracking_modes

    attr_accessor :effective_session_tracking_modes

    attr_accessor :jsp_config_descriptor

    attr_accessor :virtual_server_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'class_loader' => :'classLoader',
        :'major_version' => :'majorVersion',
        :'minor_version' => :'minorVersion',
        :'attribute_names' => :'attributeNames',
        :'context_path' => :'contextPath',
        :'effective_major_version' => :'effectiveMajorVersion',
        :'effective_minor_version' => :'effectiveMinorVersion',
        :'servlets' => :'servlets',
        :'servlet_names' => :'servletNames',
        :'server_info' => :'serverInfo',
        :'init_parameter_names' => :'initParameterNames',
        :'servlet_context_name' => :'servletContextName',
        :'servlet_registrations' => :'servletRegistrations',
        :'filter_registrations' => :'filterRegistrations',
        :'session_cookie_config' => :'sessionCookieConfig',
        :'default_session_tracking_modes' => :'defaultSessionTrackingModes',
        :'effective_session_tracking_modes' => :'effectiveSessionTrackingModes',
        :'jsp_config_descriptor' => :'jspConfigDescriptor',
        :'virtual_server_name' => :'virtualServerName'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'class_loader' => :'ClassLoader',
        :'major_version' => :'Integer',
        :'minor_version' => :'Integer',
        :'attribute_names' => :'EnumerationString',
        :'context_path' => :'String',
        :'effective_major_version' => :'Integer',
        :'effective_minor_version' => :'Integer',
        :'servlets' => :'EnumerationServlet',
        :'servlet_names' => :'EnumerationString',
        :'server_info' => :'String',
        :'init_parameter_names' => :'EnumerationString',
        :'servlet_context_name' => :'String',
        :'servlet_registrations' => :'Hash<String, ServletRegistration>',
        :'filter_registrations' => :'Hash<String, FilterRegistration>',
        :'session_cookie_config' => :'SessionCookieConfig',
        :'default_session_tracking_modes' => :'Array<String>',
        :'effective_session_tracking_modes' => :'Array<String>',
        :'jsp_config_descriptor' => :'JspConfigDescriptor',
        :'virtual_server_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'classLoader')
        self.class_loader = attributes[:'classLoader']
      end

      if attributes.has_key?(:'majorVersion')
        self.major_version = attributes[:'majorVersion']
      end

      if attributes.has_key?(:'minorVersion')
        self.minor_version = attributes[:'minorVersion']
      end

      if attributes.has_key?(:'attributeNames')
        self.attribute_names = attributes[:'attributeNames']
      end

      if attributes.has_key?(:'contextPath')
        self.context_path = attributes[:'contextPath']
      end

      if attributes.has_key?(:'effectiveMajorVersion')
        self.effective_major_version = attributes[:'effectiveMajorVersion']
      end

      if attributes.has_key?(:'effectiveMinorVersion')
        self.effective_minor_version = attributes[:'effectiveMinorVersion']
      end

      if attributes.has_key?(:'servlets')
        self.servlets = attributes[:'servlets']
      end

      if attributes.has_key?(:'servletNames')
        self.servlet_names = attributes[:'servletNames']
      end

      if attributes.has_key?(:'serverInfo')
        self.server_info = attributes[:'serverInfo']
      end

      if attributes.has_key?(:'initParameterNames')
        self.init_parameter_names = attributes[:'initParameterNames']
      end

      if attributes.has_key?(:'servletContextName')
        self.servlet_context_name = attributes[:'servletContextName']
      end

      if attributes.has_key?(:'servletRegistrations')
        if (value = attributes[:'servletRegistrations']).is_a?(Hash)
          self.servlet_registrations = value
        end
      end

      if attributes.has_key?(:'filterRegistrations')
        if (value = attributes[:'filterRegistrations']).is_a?(Hash)
          self.filter_registrations = value
        end
      end

      if attributes.has_key?(:'sessionCookieConfig')
        self.session_cookie_config = attributes[:'sessionCookieConfig']
      end

      if attributes.has_key?(:'defaultSessionTrackingModes')
        if (value = attributes[:'defaultSessionTrackingModes']).is_a?(Array)
          self.default_session_tracking_modes = value
        end
      end

      if attributes.has_key?(:'effectiveSessionTrackingModes')
        if (value = attributes[:'effectiveSessionTrackingModes']).is_a?(Array)
          self.effective_session_tracking_modes = value
        end
      end

      if attributes.has_key?(:'jspConfigDescriptor')
        self.jsp_config_descriptor = attributes[:'jspConfigDescriptor']
      end

      if attributes.has_key?(:'virtualServerName')
        self.virtual_server_name = attributes[:'virtualServerName']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          class_loader == o.class_loader &&
          major_version == o.major_version &&
          minor_version == o.minor_version &&
          attribute_names == o.attribute_names &&
          context_path == o.context_path &&
          effective_major_version == o.effective_major_version &&
          effective_minor_version == o.effective_minor_version &&
          servlets == o.servlets &&
          servlet_names == o.servlet_names &&
          server_info == o.server_info &&
          init_parameter_names == o.init_parameter_names &&
          servlet_context_name == o.servlet_context_name &&
          servlet_registrations == o.servlet_registrations &&
          filter_registrations == o.filter_registrations &&
          session_cookie_config == o.session_cookie_config &&
          default_session_tracking_modes == o.default_session_tracking_modes &&
          effective_session_tracking_modes == o.effective_session_tracking_modes &&
          jsp_config_descriptor == o.jsp_config_descriptor &&
          virtual_server_name == o.virtual_server_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [class_loader, major_version, minor_version, attribute_names, context_path, effective_major_version, effective_minor_version, servlets, servlet_names, server_info, init_parameter_names, servlet_context_name, servlet_registrations, filter_registrations, session_cookie_config, default_session_tracking_modes, effective_session_tracking_modes, jsp_config_descriptor, virtual_server_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
