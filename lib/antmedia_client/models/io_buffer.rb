=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'date'

module AntmediaClient
  class IoBuffer
    attr_accessor :object

    attr_accessor :short

    attr_accessor :char

    attr_accessor :int

    attr_accessor :long

    attr_accessor :float

    attr_accessor :double

    attr_accessor :direct

    attr_accessor :read_only

    attr_accessor :derived

    attr_accessor :auto_expand

    attr_accessor :auto_shrink

    attr_accessor :unsigned

    attr_accessor :unsigned_short

    attr_accessor :unsigned_int

    attr_accessor :medium_int

    attr_accessor :unsigned_medium_int

    attr_accessor :hex_dump

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'object' => :'object',
        :'short' => :'short',
        :'char' => :'char',
        :'int' => :'int',
        :'long' => :'long',
        :'float' => :'float',
        :'double' => :'double',
        :'direct' => :'direct',
        :'read_only' => :'readOnly',
        :'derived' => :'derived',
        :'auto_expand' => :'autoExpand',
        :'auto_shrink' => :'autoShrink',
        :'unsigned' => :'unsigned',
        :'unsigned_short' => :'unsignedShort',
        :'unsigned_int' => :'unsignedInt',
        :'medium_int' => :'mediumInt',
        :'unsigned_medium_int' => :'unsignedMediumInt',
        :'hex_dump' => :'hexDump'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'object' => :'Object',
        :'short' => :'Integer',
        :'char' => :'String',
        :'int' => :'Integer',
        :'long' => :'Integer',
        :'float' => :'Float',
        :'double' => :'Float',
        :'direct' => :'BOOLEAN',
        :'read_only' => :'BOOLEAN',
        :'derived' => :'BOOLEAN',
        :'auto_expand' => :'BOOLEAN',
        :'auto_shrink' => :'BOOLEAN',
        :'unsigned' => :'Integer',
        :'unsigned_short' => :'Integer',
        :'unsigned_int' => :'Integer',
        :'medium_int' => :'Integer',
        :'unsigned_medium_int' => :'Integer',
        :'hex_dump' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'object')
        self.object = attributes[:'object']
      end

      if attributes.has_key?(:'short')
        self.short = attributes[:'short']
      end

      if attributes.has_key?(:'char')
        self.char = attributes[:'char']
      end

      if attributes.has_key?(:'int')
        self.int = attributes[:'int']
      end

      if attributes.has_key?(:'long')
        self.long = attributes[:'long']
      end

      if attributes.has_key?(:'float')
        self.float = attributes[:'float']
      end

      if attributes.has_key?(:'double')
        self.double = attributes[:'double']
      end

      if attributes.has_key?(:'direct')
        self.direct = attributes[:'direct']
      end

      if attributes.has_key?(:'readOnly')
        self.read_only = attributes[:'readOnly']
      end

      if attributes.has_key?(:'derived')
        self.derived = attributes[:'derived']
      end

      if attributes.has_key?(:'autoExpand')
        self.auto_expand = attributes[:'autoExpand']
      end

      if attributes.has_key?(:'autoShrink')
        self.auto_shrink = attributes[:'autoShrink']
      end

      if attributes.has_key?(:'unsigned')
        self.unsigned = attributes[:'unsigned']
      end

      if attributes.has_key?(:'unsignedShort')
        self.unsigned_short = attributes[:'unsignedShort']
      end

      if attributes.has_key?(:'unsignedInt')
        self.unsigned_int = attributes[:'unsignedInt']
      end

      if attributes.has_key?(:'mediumInt')
        self.medium_int = attributes[:'mediumInt']
      end

      if attributes.has_key?(:'unsignedMediumInt')
        self.unsigned_medium_int = attributes[:'unsignedMediumInt']
      end

      if attributes.has_key?(:'hexDump')
        self.hex_dump = attributes[:'hexDump']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          object == o.object &&
          short == o.short &&
          char == o.char &&
          int == o.int &&
          long == o.long &&
          float == o.float &&
          double == o.double &&
          direct == o.direct &&
          read_only == o.read_only &&
          derived == o.derived &&
          auto_expand == o.auto_expand &&
          auto_shrink == o.auto_shrink &&
          unsigned == o.unsigned &&
          unsigned_short == o.unsigned_short &&
          unsigned_int == o.unsigned_int &&
          medium_int == o.medium_int &&
          unsigned_medium_int == o.unsigned_medium_int &&
          hex_dump == o.hex_dump
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [object, short, char, int, long, float, double, direct, read_only, derived, auto_expand, auto_shrink, unsigned, unsigned_short, unsigned_int, medium_int, unsigned_medium_int, hex_dump].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AntmediaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
