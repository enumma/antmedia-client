=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'spec_helper'
require 'json'

# Unit tests for AntmediaClient::ManagementRestServiceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ManagementRestServiceApi' do
  before do
    # run before each test
    @instance = AntmediaClient::ManagementRestServiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ManagementRestServiceApi' do
    it 'should create an instance of ManagementRestServiceApi' do
      expect(@instance).to be_instance_of(AntmediaClient::ManagementRestServiceApi)
    end
  end

  # unit tests for add_initial_user
  # Creates initial user. This is a one time scenario when initial user creation required and shouldn&#39;t be used otherwise. User object is required and can&#39;t be null
  # 
  # @param body User object. If it is null, new user won&#39;t be created.
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'add_initial_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_user
  # Creates a new user. If user object is null or if user is not authenticated, new user won&#39;t be created.
  # 
  # @param body User object. If it is null, new user won&#39;t be created.
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'add_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for authenticate_user
  # Authenticates user with given username and password. Requires user object to authenticate.
  # 
  # @param body User object to authenticate
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'authenticate_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_server_settings
  # Changes server settings. Sets Server Name, license key, market build status and node group.
  # 
  # @param body Server settings
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'change_server_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_settings
  # Changes the application settings with the given settings. Null fields will be set to default values.
  # 
  # @param appname Application name
  # @param body New application settings, null fields will be set to default values
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'change_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_user_password
  # Changes the given user&#39;s password.
  # 
  # @param body User object to change the password
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'change_user_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_application
  # Creates a new application with given name. It supports uploading custom WAR files
  # 
  # @param app_name Name for the new application
  # @param body file
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'create_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_application_0
  # Creates a new application with given name. It just creates default app
  # 
  # @param app_name Name for the new application
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'create_application_0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_application
  # Deletes application with the given name.
  # 
  # @param app_name Name of the application to delete
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :delete_db 
  # @return [Result]
  describe 'delete_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user
  # Delete the user from the server management panel&#39;s user list
  # 
  # @param username User name or e-mail of the user to be deleted
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'delete_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for edit_user
  # Edit the user in the server management panel&#39;s user list. It can change password or user type(admin, read only) 
  # 
  # @param body User to be edited. It finds the user with username.
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'edit_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_app_live_streams
  # Returns live streams in the specified application. Retrieves broadcast names and the consumer size.
  # 
  # @param appname Application name
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_app_live_streams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_info
  # Gets application info. Application info includes live stream count, vod count and application name.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_application_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_applications
  # Gets the applications in the server. Returns the name of the applications in JSON format.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_applications test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_blocked_status
  # Returns if user is blocked. User is blocked for a specific time if there are login attempts
  # 
  # @param usermail User name or e-mail of the user to check it status
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_blocked_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_cpu_info
  # Returns system cpu load, process cpu load and process cpu time.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_cpu_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file_system_info
  # Gets system file status. Returns usable space, total space, available space and in use space.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_file_system_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_gpu_info
  # Gets GPU information. Returns whether you have GPU or not. If yes, information of the gpu and the number of total gpus.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_gpu_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_heap_dump
  # Returns heap dump.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_heap_dump test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_jvm_memory_info
  # Returns JVM memory informations. Max, total, free, in-use and available processors are returned.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_jvm_memory_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_licence_status
  # Returns the last checked license status. Includes license ID, owner, start date, end date, type and license count.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_licence_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_licence_status_0
  # Returns license status. Includes license ID, status, owner, start date, end date, type and license count.
  # 
  # @param key License key
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_licence_status_0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_live_clients_size
  # Returns total number of live streams and total number of connections.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_live_clients_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_log_file
  # Gets log file. Char size of the log, offset or log type can be specified.
  # 
  # @param char_size Char size of the log
  # @param log_type Log type. ERROR can be used to get only error logs
  # @param offset_size Offset of the retrieved log
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_log_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_server_settings
  # Returns the server settings. From log level to measurement period of cpu, license key of the server host address and many more settings are returned at once.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_server_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_server_time
  # Gets server time. Returns server uptime and start time in milliseconds in JSON.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_server_time test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_settings
  # Returns the specified application settings
  # 
  # @param appname Application name
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_system_info
  # Returns system information which includes many information such as JVM memory, OS information, Available File Space, Physical memory informations in detail.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_system_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_system_memory_info
  # Gets system memory status. Returns Virtual, total physical, available physical, currently in use, total swap space, available swap space and in use swap space. 
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_system_memory_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_system_resources_info
  # Gets system resource information. Returns number of total live streams, cpu usage, system information, jvm information, file system information, license status, gpu status etc. Basically returns most of the information in one package.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_system_resources_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_thread_dump
  # Gets thread dump in plain text.Includes very detailed information such as thread name, thread id, blocked time of thread, thread state and many more information are returned.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_thread_dump test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_threads_info
  # Returns processor&#39;s thread information. Includes number of dead locked threads, thread count, and thread peek count.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_threads_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_list
  # Returns user list in the server management panel
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'get_user_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_version
  # Returns the version of Ant Media Server.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'get_version test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_admin
  # Returns whether current user is admin or not. If user is admin, it can call POST/PUT/DELETE methods
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'is_admin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_authenticated_rest
  # Returns true if user is authenticated to call rest api operations.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'is_authenticated_rest test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_enterprise_edition
  # Returns true if the server is enterprise edition.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'is_enterprise_edition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_first_login
  # Checks first login status. If server being logged in first time, it returns true, otherwise false.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'is_first_login test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_in_cluster_mode
  # Returns the server mode. If it is in the cluster mode, result will be true.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'is_in_cluster_mode test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_shutdown_properly
  # Checks whether application or applications have shutdown properly or not.
  # 
  # @param app_names Application name
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'is_shutdown_properly test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for liveness
  # Returns the hostname to check liveness with HTTP type healthcheck.
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'liveness test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_broadcast
  # Resets the viewer counts and broadcasts statuses in the db. This can be used after server crashes to recover db. It&#39;s not intended to use to ignore the crash.
  # 
  # @param appname Application name
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'reset_broadcast test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_shutdown_status
  # Set application or applications shutdown properly to true
  # 
  # @param app_names Application name
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'set_shutdown_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
