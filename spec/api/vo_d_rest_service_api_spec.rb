=begin
#Ant Media Server REST API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.31

=end

require 'spec_helper'
require 'json'

# Unit tests for AntmediaClient::VoDRestServiceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'VoDRestServiceApi' do
  before do
    # run before each test
    @instance = AntmediaClient::VoDRestServiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VoDRestServiceApi' do
    it 'should create an instance of VoDRestServiceApi' do
      expect(@instance).to be_instance_of(AntmediaClient::VoDRestServiceApi)
    end
  end

  # unit tests for delete_vo_d
  # Delete specific VoD File
  # 
  # @param id the id of the VoD file
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'delete_vo_d test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_vo_ds
  # Delete bulk VoD Files based on Vod Id
  # 
  # @param body the ids of the VoD file
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'delete_vo_ds test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_total_vod_number
  # Get the total number of VoDs
  # 
  # @param [Hash] opts the optional parameters
  # @return [Integer]
  describe 'get_total_vod_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_total_vod_number_0
  # Get the partial number of VoDs depending on the searched items
  # 
  # @param search Search parameter to get the number of items including it 
  # @param [Hash] opts the optional parameters
  # @return [Integer]
  describe 'get_total_vod_number_0 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_vo_d
  # VoD file from database
  # 
  # @param id id of the VoD
  # @param [Hash] opts the optional parameters
  # @return [VoD]
  describe 'get_vo_d test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_vod_list
  #  Get the VoD list from database. It returns 50 items at max. You can use offset value to get result page by page 
  # 
  # @param offset Offset of the list
  # @param size Number of items that will be fetched
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort_by Field to sort. Possible values are \&quot;name\&quot;, \&quot;date\&quot;
  # @option opts [String] :order_by \&quot;asc\&quot; for Ascending, \&quot;desc\&quot; Descening order
  # @option opts [String] :stream_id Id of the stream to filter the results by stream id
  # @option opts [String] :search Search string
  # @return [Array<VoD>]
  describe 'get_vod_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_vo_ds
  # Import VoD files from a directory and make it streamable.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :directory the full path of the directory that VoD files will be imported to datastore and linked to the streams
  # @return [Result]
  describe 'import_vo_ds test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_vo_ds_to_stalker
  # Import VoDs to Stalker Portal
  # 
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'import_vo_ds_to_stalker test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for synch_user_vod_list
  # Deprecated. Use import VoDs. Synchronize VoD Folder and add them to VoD database if any file exist and create symbolic links to that folder
  # Notes here
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'synch_user_vod_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unlinks_vo_d
  # Unlinks VoD path from streams directory and delete the database record. It does not delete the files. It only unlinks folder and delete database records
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :directory the full path of the directory that imported VoD files will be deleted from database. 
  # @return [Result]
  describe 'unlinks_vo_d test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_vo_d_file
  # Upload external VoD file to Ant Media Server
  # 
  # @param name the name of the VoD File
  # @param body file
  # @param [Hash] opts the optional parameters
  # @return [Result]
  describe 'upload_vo_d_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
